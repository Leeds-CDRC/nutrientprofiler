[{"path":"https://leeds-cdrc.github.io/nutrientprofiler/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"document outlines rough approach local setup contributing project.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/CONTRIBUTING.html","id":"local-setup","dir":"","previous_headings":"","what":"Local setup","title":"Contributing","text":"work project locally need Git R installed locally. also recommended install Docker VSCode enable utilise devcontainer setup edit code directly via GitHub Codespaces. ’re unfamiliar using git check fantastic Carpentries introductory course. get working project need devtools package can install following R command:","code":"# Install devtools from CRAN install.packages(\"devtools\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/CONTRIBUTING.html","id":"development-workflow","dir":"","previous_headings":"Local setup","what":"Development workflow","title":"Contributing","text":"working locally use following workflow help develop code: Create fork GitHub repository create personal copy repository can push changes Locally clone fork can start working Open R session Load devtools : R     library(devtools) Make change package files Test R session running load_all() load package (check errors) Check changes pass tests running test() ’re package passes tests ’ve updated appropriate documentation now run check() locally make sure appropriate roxygen2 files created/update functions ’ve now tagged @export exported NAMESPACE Commit changes check() run push GitHub Open pull request main branch development branch. trigger GitHub action also runs equivalent check() make sure didn’t miss anything ensure package still works different versions R. checks pass pull request changes can accepted maintainer.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 nutrientprofiler authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_assessment.html","id":"a-and-c-score-calculators","dir":"Articles","previous_headings":"","what":"A and C score calculators","title":"Nutrient Profile Model Assessment","text":"first component NPMAssess step calculate C scores. involves two functions: A_scorer C_scorer accept number arguments corresponding appropriate nutrient score sum . A_scorer takes 4 arguments: energy_score, sugar_score, salt_score fat_score. scores calculated previous NPMScore step summed A_scorer function return compound score. C_scorer takes 3 arguments: fvn_score (fruit, vegetable nut score), protein_score fibre_score calculates sum return C score.","code":"A_scorer(energy_score = 3, sugar_score = 5, salt_score = 1, fat_score = 2) #> [1] 11  C_scorer(fvn_score = 2, protein_score = 3, fibre_score = 1) #> [1] 6"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_assessment.html","id":"nutrient-profile-model-score","dir":"Articles","previous_headings":"","what":"Nutrient Profile Model Score","title":"Nutrient Profile Model Assessment","text":"computing C scores ’re able calculate overall Nutrient Profile Model Score product. method computing score conditional size C score can circumstances take account fibre score fruit, vegetables nut score. Therefore NPM_total function takes 4 arguments: a_score, c_score, fvn_score, fibre_score. function works subtracting C score score. However, score greater equal 11 fruit, vegetable nut score less 5, function performs different calculation substracts sum fibre score fruit, vegetables nut score score. follows logic defined Technical Guidance Nutrient Profile modelling.","code":"NPM_total(7, 2, 1, 1)  # example using keyword arguments NPM_total(a_score = 10, c_score = 4, fvn_score = 1, fibre_score = 2)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_assessment.html","id":"nutrient-profile-model-assessment","dir":"Articles","previous_headings":"","what":"Nutrient Profile Model Assessment","title":"Nutrient Profile Model Assessment","text":"determining overall score product within Nutrient Profile Model final step assess score determine product passes fails. simple test whether score specific threshold threshold differs product food drink. product food NPM score 4 leads failure, whilst drink product fails NPM scores 1 . NPM_assess works accepting two arguments: NPM_score type. type determines product food drink accepting either food drink whilst NPM_score numeric value calculated prior NPM_total step. function returns character vector single value either \"PASS\" \"FAIL\".","code":"# pass NPM_assess(3, \"food\") #> [1] \"PASS\"  # fail NPM_assess(6, type = \"drink\") #> [1] \"FAIL\""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_scoring.html","id":"adjuster-functions","dir":"Articles","previous_headings":"","what":"Adjuster functions","title":"Nutrient Profile Model Scoring","text":"Nutritional values need adjusted scoring ensure: nutritional information adjusted based nutrient denisty standardised 100g product rather total amount enable better comparisons products converted appropriate unit scoring thresholds adjuster functions built ontop generic_adjuster function. takes value argument amount nutritional category divides second argument adjusted_weight corresponds specific gravity adjusted weight/volume product determined using specific gravity functions . output multiplied 100 give final adjusted value.","code":"generic_adjuster(10, 15) #> [1] 66.66667"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_scoring.html","id":"energy-and-salt-adjustments","dir":"Articles","previous_headings":"Adjuster functions","what":"Energy and salt adjustments","title":"Nutrient Profile Model Scoring","text":"enough adjusting nutritional values energy salt need additional steps properly adjust value appropriate units. energy nutritional information can either kcal kJ salt can either listed sodium measurement mg salt measurement g. scoring thresholds Nutrient Profile Model specified kJ energy mg sodium salt additional steps needed properly adjust values present alternate unit. handled specific adjuster functions energy salt also take adjuster_type argument specify units passed value.","code":"# for energy in kj energy_value_adjuster(10, 80, adjuster_type=\"kj\") #> [1] 12.5  # for energy in kcal energy_value_adjuster(60, 300, adjuster_type=\"kj\") #> [1] 20  # for salt in grams salt_adjuster(3, 100, adjuster_type=\"salt\") #> [1] 30  # for salt in mg of sodium salt_adjuster(60, 100, adjuster_type=\"sodium\") #> [1] 60"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_scoring.html","id":"scoring-function","dir":"Articles","previous_headings":"","what":"Scoring function","title":"Nutrient Profile Model Scoring","text":"adjuster functions return adjusted value nutritional information ensure can calculate NPM Score based 100g product. use adjusted value subsequent step actually calculating score nutrient groups. performed using NPM_score_function acts dispatcher function takes value type arguments determine adjustment function call scoring thresholds use. function also takes optional additional arguments specifying adjusted_weight can passed adjuster functions adjuster_type argument types energy salt. hood function calling generic_adjuster adjust nutritional value using adjusted_weight, next passes adjusted value scoring_function. scoring_function determines score value based provided score thresholds. scoring_function behaves taking vector thresholds descending order. First sets score total number thresholds available (.e. 3 example). takes value provided checks value greater item thresholds vector, greater item thresholds returns score corresponding item. value isn’t greater item score, set earlier, deducted 1. continues item thresholds option left value greater final item thresholds leading score 0.","code":"# calculate a score for a protein value NPM_score_function(80, adjusted_weight=100, \"protein\") #> [1] 5 # create thesholds vector from largest to smallest THRESHOLDS <- c(3, 2, 1)  # score the value 1 against the provided thresholds # returns 0 scoring_function(1, THRESHOLDS) #> [1] 0  # returns 2 scoring_function(2.1, THRESHOLDS) #> [1] 2"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_scoring.html","id":"fruit-vegetables-and-nuts-scoring","dir":"Articles","previous_headings":"Scoring function","what":"Fruit, vegetables and nuts scoring","title":"Nutrient Profile Model Scoring","text":"one exception scoring function fruit, vegetables nuts. nutritional information presented percentage scoring specified Nutrient Profile Model doesn’t score continuous manner package includes specific fruit_veg_nut_scorer. function takes value returns score (either 0, 1, 2 5) depending value meets specific percentage threshold.","code":"# scores a 5 fruit_veg_nut_scorer(81) #> [1] 5  # scores a 2 fruit_veg_nut_scorer(70) #> [1] 2  # scores a 1 fruit_veg_nut_scorer(45) #> [1] 1  # scores a 0 fruit_veg_nut_scorer(20) #> [1] 0"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofiler.html","id":"specific-gravity-conversions","dir":"Articles","previous_headings":"","what":"Specific gravity conversions","title":"Introduction to nutrientprofiler","text":"trying determine NPM score volume weight product needs adjusted account ’s specific gravity. adjust product weights volumes specific gravity use SGConverter function. high level function designed operate row data.frame parsing multiple columns determine calculate adjusted specific gravity score. figure attempts outline hierarchy function calls SGConverter initiates. logic determining adjust values specific gravity complicated potential options around whether drink ready--drink, powdered preparation, cordial, within powdered cordial options additional consideration must given preparation instructions provided. figure function named node column name function uses dispatch underlying functions specified single quotes. function returns value marked empty diamond. SGConverter logic","code":"Warning: The `SGConverter` function has been specifically designed with an existing dataset in mind and expects specific column names to work. # using dplyr library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union cdrcdrinks %>%   rowwise() %>%   mutate(out = SGConverter(pick(everything()))) %>%   select(out) #> # A tibble: 10 × 1 #> # Rowwise:  #>      out #>    <dbl> #>  1 100   #>  2 130   #>  3 104   #>  4 129.  #>  5 103   #>  6 100   #>  7  51.5 #>  8  25   #>  9 124.  #> 10 109  # using base R cdrcdrinks[\"sg\"] <- unlist(lapply(seq_len(nrow(cdrcdrinks)), function(i) SGConverter(cdrcdrinks[i, ])))"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofiler.html","id":"nutrient-profile-model-scoring","dir":"Articles","previous_headings":"","what":"Nutrient profile model scoring","title":"Introduction to nutrientprofiler","text":"next part package series functions handling Nutrient Profile Model scoring. specifically look functions adjusting units expected unit documented Nutrient Profile Model, generic scoring function returning score value given number thresholds, scoring dispatcher function determines adjuster scoring thresholds use given value high level NPMScore wrapper function shows logic calculating NPM score across multiple nutritional groups data.frame data. quick example running NPMScore across single row data shown : example building tidyverse pipeline calculate scores across rows data.frame using NPMScore SGConverter shown :","code":"NPMScore(cdrcdrinks[1,], sg_adjusted_label=\"sg\") #>   energy_score sugar_score fat_score protein_score salt_score fvn_score #> 1            0          10         2             4          0         0 #>   fibre_score #> 1           4 library(tidyr)  cdrcdrinks %>%    rowwise() %>%    mutate( sg = SGConverter(pick(everything()))) %>%    mutate(test = NPMScore(pick(everything()), sg_adjusted_label=\"sg\")) %>%    unnest(test) %>% select(energy_score, sugar_score, salt_score, fvn_score,   protein_score, fat_score, fibre_score) #> # A tibble: 10 × 7 #>    energy_score sugar_score salt_score fvn_score protein_score fat_score #>           <dbl>       <dbl>      <dbl>     <dbl>         <dbl>     <dbl> #>  1            0          10          0         0             4         2 #>  2            0           3          0         0             1         8 #>  3            2           2          1         0             0         0 #>  4            0           2          0         0             0         0 #>  5            2           4          0         0             0         0 #>  6            0           4          0         0             2        10 #>  7            1           6          2         0             0         0 #>  8            2          10          4         0             1         0 #>  9            2           3          0         0             0         0 #> 10            2           3          0         0             0         0 #> # ℹ 1 more variable: fibre_score <dbl>"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofiler.html","id":"nutrient-profile-model-assessment","dir":"Articles","previous_headings":"","what":"Nutrient Profile Model assessment","title":"Introduction to nutrientprofiler","text":"calculating scores specific nutrients product next need perform actual Nutrient Profile Model assessment. involves combining individual nutrient scores calculate score C score use compound calculate total Nutrient Profile Model score assess determine pass fail. package implements logic high-level wrapper function called NPMAssess operates row data.frame. expects columns generated previous NPMScore step allow calculate score C score can used follows: can also use tidyverse functions build entire pipeline running Nutrient Profile Model assessments. building blocks NPMAssess explained detail Nutrient Profile Model Assessment vignette","code":"# create NPM_score data.frame from NPMScore # using the specific gravity `sg` column created above npm_scores <- do.call(         \"rbind\",         lapply(             seq_len(nrow(cdrcdrinks)),             function(i) NPMScore(cdrcdrinks[i, ], sg_adjusted_label = \"sg\")         )     )  # append NPM Score columns to original data combo_df <- cbind(cdrcdrinks, npm_scores)  # test NPMAssess on this data NPMAssess(combo_df[1, ]) #>   A_score C_score NPM_score NPM_assessment #> 1      12       8         8           FAIL # using tidyr library(tidyr)  cdrcdrinks %>%    rowwise() %>%    mutate( sg = SGConverter(pick(everything()))) %>%    mutate(test = NPMScore(pick(everything()), sg_adjusted_label=\"sg\")) %>%    unnest(test) %>%    rowwise() %>%   mutate(assess = NPMAssess(pick(everything()))) %>%   unnest(assess) %>%   select(product_type, NPM_score, NPM_assessment) #> # A tibble: 10 × 3 #>    product_type NPM_score NPM_assessment #>    <chr>            <dbl> <chr>          #>  1 Food                 8 FAIL           #>  2 Food                11 FAIL           #>  3 Drink                5 FAIL           #>  4 Drink                2 FAIL           #>  5 Drink                6 FAIL           #>  6 Food                14 FAIL           #>  7 Drink                9 FAIL           #>  8 Drink               16 FAIL           #>  9 Drink                5 FAIL           #> 10 Drink                5 FAIL"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/specific_gravity.html","id":"breaking-down-sgconverter","dir":"Articles","previous_headings":"","what":"Breaking down SGConverter","title":"Specific Gravity Adjustment","text":"SGConverter works taking row data.frame ’s argument. checks row column called product_type. column used define whether product either \"food\" \"drink\". value column used SGConverter determine whether pass row either sg_food_converter function sg_drink_converter function.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/specific_gravity.html","id":"calculating-specific-gravity-for-food","dir":"Articles","previous_headings":"Breaking down SGConverter","what":"Calculating specific gravity for food","title":"Specific Gravity Adjustment","text":"SGConverter passed product_type \"food\" passes row sg_food_converter. function simple test whether row contains column called weight_g, column doesn’t contain NA returns value contained weight_g don’t adjust specific gravity. weight_g column contain NA row dispatches sg_liquidfood_converter function. sg_liquidfood_converter checks food_type column contains type value match product included SGtab vector. sg_liquidfood_converter checks food_type column empty string, true calculates specific gravity adjusted volume getting value volume_ml column row multiplying specific gravity value SGtab indexed vector using food_type column value passed row.","code":"# example of how sg_food_converter behaves library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  data <- data.frame(weight_g = c(100, NA, NA),                    volume_ml = c(NA, 10, 100),                     product_type = c(\"food\",\"food\",\"food\"),                    food_type = c(\"\",\"Ice cream\", \"Semi-skimmed milk\"))  sg_food_converter(data[1, ]) #> [1] 100  # on all rows with dplyr data %>%   rowwise() %>%   mutate(sg = sg_food_converter(pick(everything()))) %>%   select(sg) #> # A tibble: 3 × 1 #> # Rowwise:  #>      sg #>   <dbl> #> 1   100 #> 2    13 #> 3   103"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/specific_gravity.html","id":"calculating-specific-gravity-for-drinks","dir":"Articles","previous_headings":"Breaking down SGConverter","what":"Calculating specific gravity for drinks","title":"Specific Gravity Adjustment","text":"logic calculating specific gravity drinks slightly complicated. SGConverter function found \"drink\" specified product_type column dispatches row sg_drink_converter function. checks row column called drink_format specifies whether drink either: ready drink, cordial powdered drink (\"ready\", \"cordial\", \"powdered\"). options sg_drink_converter dispatches row additional function. \"ready\" dispatches sg_ready_drink_converter. function checks row contains drink_type column row contains empty string. contain empty string calls generic_specific_gravity function passing volume_ml column value specific gravity multiplier indexed SGtab based value drink_type. drink_type contain empty string just returns volume_ml column value. \"cordial\" dispatches sg_cord_drink_converter. function checks row nutrition_info column help determine proceed. column contains information drink consumed, whether directly consumed, following preparation instructions dilute cordial instructions provided (\"consumed\", \"preparation instructions given\", \"preparation instructions given\"). nutrition_info \"consumed\" volume_ml column value specific gravity multipler SGtab \"Cordial/squash ready drink\" passed generic_specific_gravity function. \"preparation instructions given\" expectation additional column row volume_water_ml specifies volume water used dilute cordial. \"preparation instructions given\" found nutrition_info column computes sum volume_ml volume_water_ml columns passes generic_specific_gravity along specific gravity multipler SGtab \"Cordial/squash ready drink\". \"preparation instructions given\" volume_ml column value passed generic_specific_gravity function along specific gravity multiplier indexed SGtab \"Cordial/squash undiluted\". drink_format column value \"powdered\" dispatches sg_powd_drink_converter function. checks row values nutrition_info column help determine compute specific gravity adjustment using 3 potential values defined cordial section. nutrition_info \"consumed\" volume_ml column value specific gravity multipler SGtab \"Cordial/squash ready drink\" passed generic_specific_gravity function. \"preparation instructions given\" expectation additional column row weight_g specifies weight grams powdered drink used. \"preparation instructions given\" found nutrition_info column computes sum weight_g volume_water_ml columns passes generic_specific_gravity along specific gravity multipler SGtab \"Cordial/squash ready drink\". \"preparation instructions given\" weight_g column value returned unadjusted.","code":"# example of how sg_ready_drink_converter behaves data <- data.frame(volume_ml = c(30, 10, 100),                   drink_type = c(\"Energy drink\",\"Ice cream\", \"Semi-skimmed milk\"))               sg_ready_drink_converter(data[1, ]) #> [1] 32.1  # on all rows with dplyr data %>%   rowwise() %>%   mutate(sg = sg_ready_drink_converter(pick(everything()))) %>%   select(sg) #> # A tibble: 3 × 1 #> # Rowwise:  #>      sg #>   <dbl> #> 1  32.1 #> 2  13   #> 3 103 # example of how sg_cord_drink_converter behaves data <- data.frame(volume_ml = c(30, 10, 100),                    volume_water_ml = c(0, 90, NA),                    nutrition_info = c(\"as consumed\",\"preparation instructions given\", \"preparation instructions not given\"))  sg_cord_drink_converter(data[1,]) #> [1] 30.9  data %>%   rowwise() %>%   mutate(sg = sg_cord_drink_converter(pick(everything()))) %>%   select(sg)      #> # A tibble: 3 × 1 #> # Rowwise:  #>      sg #>   <dbl> #> 1  30.9 #> 2 103   #> 3 109 # example of how sg_powd_drink_converter behaves data <- data.frame(volume_ml = c(90, NA, NA),                    weight_g = c(NA, 10, 100),                    volume_water_ml = c(0, 90, NA),                    nutrition_info = c(\"as consumed\",\"preparation instructions given\", \"preparation instructions not given\"))  sg_powd_drink_converter(data[1,]) #> [1] 92.7  data %>%   rowwise() %>%   mutate(sg = sg_powd_drink_converter(pick(everything()))) %>%   select(sg)      #> # A tibble: 3 × 1 #> # Rowwise:  #>      sg #>   <dbl> #> 1  92.7 #> 2 103   #> 3 100"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/specific_gravity.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Specific Gravity Adjustment","text":"Overall functions SGConverter quite constrictive. expect particular column names work won’t just work data. However, building blocks functions generic_specific_gravity can used develop functions building specific gravity conversion pipeline. existing steps shown serve template build specific gravity conversion pipeline.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Coleman. Author. Vicki Jenneson. Author, maintainer.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coleman , Jenneson V (2023). nutrientprofiler: Nutrient Model Profiler. https://leeds-cdrc.github.io/nutrientprofiler/, https://github.com/Leeds-CDRC/nutrientprofiler.","code":"@Manual{,   title = {nutrientprofiler: Nutrient Model Profiler},   author = {Alex Coleman and Vicki Jenneson},   year = {2023},   note = {https://leeds-cdrc.github.io/nutrientprofiler/, https://github.com/Leeds-CDRC/nutrientprofiler}, }"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/index.html","id":"id_-nutrientprofiler-r-package","dir":"","previous_headings":"","what":"Nutrient Model Profiler","title":"Nutrient Model Profiler","text":"Welcome nutrientprofiler R package repository! package provides functions help assess product information UK Nutrient Profiling Model (2004/5) scope HFSS legislation around product placement. designed provide low level functions implement UK Nutrient Profiling Model scoring can applied across product datasets.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Nutrient Model Profiler","text":"present R package available via CRAN. can however install direct GitHub using remotes. can also download package archive GitHub install source using following steps. steps show directly within R can also download archive respository directly GitHub releases page.","code":"install.packages(\"remotes\")  remotes::install_github(\"Leeds-CDRC/nutrientprofiler\") # download the repository as a .tar.gz archive # to your current directory download.file(\"https://github.com/Leeds-CDRC/nutrientprofiler/archive/refs/tags/v0.2.2.tar.gz\",               dest = \"./nutrientprofiler-v0.2.2.tar.gz\")  # install the package directly from source install.packages(\"./nutrientprofiler-v0.2.2.tar.gz\", repos = NULL, type=\"source\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/A_scorer.html","id":null,"dir":"Reference","previous_headings":"","what":"A score function — A_scorer","title":"A score function — A_scorer","text":"scores defined scores energy, sugars, fat salt summed together","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/A_scorer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A score function — A_scorer","text":"","code":"A_scorer(energy_score, sugar_score, fat_score, salt_score)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/A_scorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A score function — A_scorer","text":"energy_score, numeric value energy score sugar_score, numeric value sugar score fat_score, numeric value fat score salt_score, numeric value salt score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/A_scorer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A score function — A_scorer","text":"numeric value score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/C_scorer.html","id":null,"dir":"Reference","previous_headings":"","what":"C score function — C_scorer","title":"C score function — C_scorer","text":"C score defined scores fruit/veg/nut percentage, protein fibre summed together","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/C_scorer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C score function — C_scorer","text":"","code":"C_scorer(fvn_score, protein_score, fibre_score)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/C_scorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"C score function — C_scorer","text":"fvn_score, numeric value fruit/vegetables/nuts percentage score protein_score, numeric value protein score fibre_score, numeric value fibre score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/C_scorer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"C score function — C_scorer","text":"numeric value C score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMAssess.html","id":null,"dir":"Reference","previous_headings":"","what":"NPM assess function — NPMAssess","title":"NPM assess function — NPMAssess","text":"function aims apply various scoring functions across data.frame row row basis. expected use function conjunction call lapply single row. function returns data.frame containing score, C score, NPM score NPM assessment.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMAssess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NPM assess function — NPMAssess","text":"","code":"NPMAssess(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMAssess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NPM assess function — NPMAssess","text":"row, row NPMScore call","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMAssess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NPM assess function — NPMAssess","text":"data.frame containing score, C score, NPM score, NPM assessment row","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMScore.html","id":null,"dir":"Reference","previous_headings":"","what":"NPM scoring dispatcher — NPMScore","title":"NPM scoring dispatcher — NPMScore","text":"function written calculating NPM scores across entire row dataframe. wrapper logic underlying NPM_score_function applied NPMCalculator input data frame highly inflexible without expected column names. expects specific gravity conversions already performed values outputted new single column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NPM scoring dispatcher — NPMScore","text":"","code":"NPMScore(row, sg_adjusted_label)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NPM scoring dispatcher — NPMScore","text":"row row NPMCalculator dataframe sg_adjusted_label character value specifying name specific gravity adjusted column","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NPM scoring dispatcher — NPMScore","text":"matrix NPM scores","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_assess.html","id":null,"dir":"Reference","previous_headings":"","what":"NPM Assess function — NPM_assess","title":"NPM Assess function — NPM_assess","text":"function takes NPM score returns either \"PASS\" \"FAIL\" depending type argument. type either \"food\" \"drink\".","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_assess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NPM Assess function — NPM_assess","text":"","code":"NPM_assess(NPM_score, type)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_assess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NPM Assess function — NPM_assess","text":"NPM_score, numeric value NPM score type, character value either \"food\" \"drink\" determine assess score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_assess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NPM Assess function — NPM_assess","text":"character value either \"PASS\" \"FAIL\"","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_score_function.html","id":null,"dir":"Reference","previous_headings":"","what":"The NPM scoring dispatch function — NPM_score_function","title":"The NPM scoring dispatch function — NPM_score_function","text":"function serves main entry point getting nutrient profiling model scores. takes value (vector values) type using type determines scoring function use based constant thresholds. Adjustments value passed also performed types except fvn. adjustments take account adjusted_weight product (specific gravity transformations) calculate new value applied scoring thresholds. ... provided allow passing additional arguments adjuster functions. code based logic within https://github.com/Leeds-CDRC/NPM-Calculator/blob/main/server.R","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_score_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The NPM scoring dispatch function — NPM_score_function","text":"","code":"NPM_score_function(value, type, ...)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_score_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The NPM scoring dispatch function — NPM_score_function","text":"value, numeric value vector values score type, character string specifies type value passed control scoring logic ..., option named arguments pass adjuster functions, commonly adjusted_weight","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_score_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The NPM scoring dispatch function — NPM_score_function","text":"numeric score value vector scores","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_total.html","id":null,"dir":"Reference","previous_headings":"","what":"NPM_total — NPM_total","title":"NPM_total — NPM_total","text":"function calculate total NPM score Logic function documented Nutrient Profiling Technical Guidance page 6.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NPM_total — NPM_total","text":"","code":"NPM_total(a_score, c_score, fvn_score, fibre_score)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NPM_total — NPM_total","text":"a_score, numeric value score c_score, numeric value C score fvn_score, numeric value specific score fruit/veg/nuts percentage fibre_score, numeric value fibre score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_total.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NPM_total — NPM_total","text":"numeric value overall NPM score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGConverter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific Gravity converter function — SGConverter","title":"Specific Gravity converter function — SGConverter","text":"function key entry point performing specific gravity conversions works processing data dataframe row dispatching based column values series additional sub functions return back SG-adjusted number","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGConverter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific Gravity converter function — SGConverter","text":"","code":"SGConverter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGConverter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific Gravity converter function — SGConverter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGConverter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific Gravity converter function — SGConverter","text":"number.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGtab.html","id":null,"dir":"Reference","previous_headings":"","what":"specific gravity conversion named vector — SGtab","title":"specific gravity conversion named vector — SGtab","text":"specific gravity conversion named vector","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGtab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"specific gravity conversion named vector — SGtab","text":"","code":"SGtab"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGtab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"specific gravity conversion named vector — SGtab","text":"object class numeric length 14.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/cdrcdrinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset called CDRC Drinks — cdrcdrinks","title":"Example dataset called CDRC Drinks — cdrcdrinks","text":"handcrafted set data can used input nutrientprofiler functions","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/cdrcdrinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset called CDRC Drinks — cdrcdrinks","text":"","code":"cdrcdrinks"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/cdrcdrinks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset called CDRC Drinks — cdrcdrinks","text":"cdrcdrinks ## data frame 10 rows 21 columns: name Name product brand Brand product product_category Category product product_type Type product, .e. Food Drink food_type Type food, used specific gravity conversion drink_format Format drink, used specific gravity conversion drink_type Type drink, used speciifc gravity conversion nutrition_info nutritional information presented, specific gravity conversion energy_measurement_kj Energy measurement KJ energy_measurement_kcal Energy measurement kcal sugar_measurement_g Sugar content measured grams fat_measurement_g fat content measured grams salt_measurement_g salt content measured grams sodium_measurement_mg salt content measured mg sodium fibre_measurement_nsp fibtre measurement using NSP fibre_measurement_aoac fibre measurement using AOAC protein_measurement_g protein emasurement product fruit_nut_measurement_percent percent fruit nuts product weight_g mass product solid volume_ml volume product liquid volume_water_ml volume water diluted products","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/energy_value_adjuster.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for adjusting energy information for A score calculation — energy_value_adjuster","title":"Function for adjusting energy information for A score calculation — energy_value_adjuster","text":"Adjustment required calculating scores based nutritional measurements.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/energy_value_adjuster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for adjusting energy information for A score calculation — energy_value_adjuster","text":"","code":"energy_value_adjuster(value, adjusted_weight, adjuster_type = \"kj\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/energy_value_adjuster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for adjusting energy information for A score calculation — energy_value_adjuster","text":"value numeric value corresponding energy measurement food/drink adjusted_weight numeric value corresponding total weight food/drink specific gravity adjustment adjuster_type character value either kj kcal determine adjustment perform","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/energy_value_adjuster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for adjusting energy information for A score calculation — energy_value_adjuster","text":"numeric value adjusted nutritional data","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fruit_veg_nut_scorer.html","id":null,"dir":"Reference","previous_headings":"","what":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","title":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","text":"scoring logic percentage fruit, vegetables nuts product different scorers. Therefore, use generic scoring function write specific one .","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fruit_veg_nut_scorer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","text":"","code":"fruit_veg_nut_scorer(value)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fruit_veg_nut_scorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","text":"value numeric value percentage fruit, nuts vegetables","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fruit_veg_nut_scorer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","text":"numeric score value","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_adjuster.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","title":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","text":"Adjustment required calculating scores based nutritional measurements.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_adjuster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","text":"","code":"generic_adjuster(value, adjusted_weight)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_adjuster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","text":"value numeric value corresponding nutritional measurement food/drink adjusted_weight numeric value corresponding total weight food/drink specific gravity adjustment","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_adjuster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","text":"numeric value adjusted nutritional data","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_specific_gravity.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic specific gravity converter — generic_specific_gravity","title":"Generic specific gravity converter — generic_specific_gravity","text":"function specifies generic specific gravity conversion","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_specific_gravity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic specific gravity converter — generic_specific_gravity","text":"","code":"generic_specific_gravity(volume, specific_gravity)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_specific_gravity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic specific gravity converter — generic_specific_gravity","text":"volume, value representing volume adjust specific gravity specific_gravity, multiplier representing specific gravity product","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_specific_gravity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic specific gravity converter — generic_specific_gravity","text":"value adjusted specific_gravity","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/salt_adjuster.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for adjusting the salt input value — salt_adjuster","title":"Function for adjusting the salt input value — salt_adjuster","text":"Adjustments required calculating scores depends type salt measurement provided.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/salt_adjuster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for adjusting the salt input value — salt_adjuster","text":"","code":"salt_adjuster(value, adjusted_weight, adjuster_type = \"sodium\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/salt_adjuster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for adjusting the salt input value — salt_adjuster","text":"value numeric value corresponding salt measurement food/drink adjusted_weight numeric value corresponding total weight food/drink specific gravity adjustment adjuster_type character either \"salt\" \"sodium\" help determine required adjustment","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/salt_adjuster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for adjusting the salt input value — salt_adjuster","text":"numeric value appropriate adjustment made","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/scoring_function.html","id":null,"dir":"Reference","previous_headings":"","what":"a template scoring function — scoring_function","title":"a template scoring function — scoring_function","text":"function takes value vector thresholds iterates reversed vector indexes thresholds vector checks value less threshold value itered index (comparing smallest largest). threshold score calculated length thresholds minus every else branch iter loop.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/scoring_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a template scoring function — scoring_function","text":"","code":"scoring_function(value, thresholds)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/scoring_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a template scoring function — scoring_function","text":"value passed numeric value thresholds vector thresholds use score order highest lowest","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_cord_drink_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","title":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","text":"function performs specific gravity conversion cordial drinks conversion performed based value nutrition_info column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_cord_drink_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","text":"","code":"sg_cord_drink_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_cord_drink_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_cord_drink_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","text":"numeric value specific gravity adjusted volume depending nutrition_info column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_drink_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity drink dispatcher — sg_drink_converter","title":"Specific gravity drink dispatcher — sg_drink_converter","text":"function run data product_type \"drink\" dispatches additional functions based matched value drink_format column","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_drink_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity drink dispatcher — sg_drink_converter","text":"","code":"sg_drink_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_drink_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity drink dispatcher — sg_drink_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_drink_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity drink dispatcher — sg_drink_converter","text":"dispatches row another converter function based value drink_format column row","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_food_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity food dispatcher — sg_food_converter","title":"Specific gravity food dispatcher — sg_food_converter","text":"function run data product_type \"food\" checks column weight_g contains NA values assume whether food liquid solid solid returns weight unadjusted liquid dispatches additional function","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_food_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity food dispatcher — sg_food_converter","text":"","code":"sg_food_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_food_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity food dispatcher — sg_food_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_food_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity food dispatcher — sg_food_converter","text":"either value weight_g column row dispatches row sg_liquidfood_converter","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_liquidfood_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity liquid converter — sg_liquidfood_converter","title":"Specific gravity liquid converter — sg_liquidfood_converter","text":"function run data identified sg_food_converter liquid food checks value food_type column present retrieves specific gravity multiplier multiplies volume_ml column value. food_type empty returns unadjusted volume_ml value","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_liquidfood_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity liquid converter — sg_liquidfood_converter","text":"","code":"sg_liquidfood_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_liquidfood_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity liquid converter — sg_liquidfood_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_liquidfood_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity liquid converter — sg_liquidfood_converter","text":"numeric value specific gravity adjusted volume_ml column row","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_powd_drink_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","title":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","text":"function performs specific gravity conversion powdered drinks conversion performed based value nutrition_info column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_powd_drink_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","text":"","code":"sg_powd_drink_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_powd_drink_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_powd_drink_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","text":"numeric value specific gravity adjusted volume/mass depending nutrition_info column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_ready_drink_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","title":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","text":"function performs specific gravity conversion ready consume drinks based specific gravity value value drink_type column. column empty returns volume_ml unadjusted.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_ready_drink_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","text":"","code":"sg_ready_drink_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_ready_drink_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_ready_drink_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","text":"numeric value specific gravity adjusted volume_ml column row based drink_type column","code":""}]
