[{"path":"https://leeds-cdrc.github.io/nutrientprofiler/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"document outlines rough approach local setup contributing project.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/CONTRIBUTING.html","id":"local-setup","dir":"","previous_headings":"","what":"Local setup","title":"Contributing","text":"work project locally need Git R installed locally. also recommended install Docker VSCode enable utilise devcontainer setup edit code directly via GitHub Codespaces. Alternatively, can use conda manage R packages; see instructions . ’re unfamiliar using git check fantastic Carpentries introductory course. get working project need devtools package can install following R command:","code":"# Install devtools from CRAN install.packages(\"devtools\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/CONTRIBUTING.html","id":"using-conda","dir":"","previous_headings":"Local setup","what":"Using conda","title":"Contributing","text":"can install R manage packages dependencies using conda (see open source Miniforge installer ). file conda-dev-env.yml contains minimal list packages (including devtools), allowing create environment conda: ’ve agreed installation, can activate environment called np-r-env: now able launch interactive R session terminal, run .R files Rscript command.","code":"conda env create -f conda-dev-env.yml conda activate np-r-env"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/CONTRIBUTING.html","id":"development-workflow","dir":"","previous_headings":"Local setup","what":"Development workflow","title":"Contributing","text":"working locally use following workflow help develop code: Create fork GitHub repository create personal copy repository can push changes Locally clone fork can start working Open R session Load devtools : R     library(devtools) Make change package files Test R session running load_all() load package (check errors) Check changes pass tests running test() package passes tests ’ve updated appropriate documentation now run check() locally make sure appropriate roxygen2 files created/update functions ’ve now tagged @export exported NAMESPACE Commit changes check() run push GitHub Open pull request main branch development branch. trigger GitHub action also runs equivalent check() make sure didn’t miss anything ensure package still works different versions R. checks pass pull request changes can accepted maintainer.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/custom_specific_gravity.html","id":"where-adjusted-volume-has-been-provided","dir":"Articles","previous_headings":"","what":"Where adjusted volume has been provided","title":"Custom specific gravity","text":"always, need load data set required libraries: dataset column called custom_sg_adjusted empty except products final adjusted volume based specific gravity provided. Now, calculate specific gravities usual, initially ignoring custom values, modifying output include custom values: can continue analysis using newly updated specific gravity values: results table looks much previous examples, addition custom_sg_adjusted column record manual modification occurred.","code":"# load required libraries library(tidyr) library(dplyr) library(nutrientprofiler)  # read in the data example_data <- read.csv(\"data/example_data.csv\") example_data #>                  name brand product_category product_type food_type #> 1              lembas    NA               NA         Food           #> 2     zeno's icecream    NA               NA         Food Ice cream #> 3         mystic rush    NA               NA        Drink           #> 4  delta ringer drink    NA               NA        Drink           #> 5        welter water    NA               NA        Drink           #> 6       janus's drink    NA               NA         Food           #> 7   beta ringer drink    NA               NA        Drink           #> 8   zeta ringer drink    NA               NA        Drink           #> 9   heavyweight water    NA               NA        Drink           #> 10       bantam water    NA               NA        Drink           #>    drink_format             drink_type                     nutrition_info #> 1                                                                         #> 2                                                                         #> 3         Ready Carbonated/juice drink                                    #> 4      Powdered                            Preparation instructions given #> 5       Cordial                                               As consumed #> 6                                                                         #> 7      Powdered                                               As consumed #> 8      Powdered                        Preparation instructions not given #> 9       Cordial                            Preparation instructions given #> 10      Cordial                        Preparation instructions not given #>    energy_measurement_kj energy_measurement_kcal sugar_measurement_g #> 1                    266                      NA                  50 #> 2                     NA                      24                  21 #> 3                     NA                     194                  11 #> 4                    188                      NA                  15 #> 5                     NA                     205                  19 #> 6                     NA                      24                  21 #> 7                    188                      NA                  15 #> 8                    188                      NA                  15 #> 9                     NA                     205                  19 #> 10                    NA                     205                  19 #>    satfat_measurement_g salt_measurement_g sodium_measurement_mg #> 1                     3                 NA                   0.6 #> 2                    11               0.08                    NA #> 3                     0                 NA                 100.0 #> 4                     0                 NA                 100.0 #> 5                     0               0.10                    NA #> 6                    11               0.08                    NA #> 7                     0                 NA                 100.0 #> 8                     0                 NA                 100.0 #> 9                     0               0.10                    NA #> 10                    0               0.10                    NA #>    fibre_measurement_nsp fibre_measurement_aoac protein_measurement_g #> 1                      3                     NA                   7.0 #> 2                     NA                    0.7                   3.5 #> 3                     NA                    0.0                   0.0 #> 4                     NA                    0.0                   0.5 #> 5                     NA                    0.0                   0.1 #> 6                     NA                    0.7                   3.5 #> 7                     NA                    0.0                   0.5 #> 8                     NA                    0.0                   0.5 #> 9                     NA                    0.0                   0.1 #> 10                    NA                    0.0                   0.1 #>    fvn_measurement_percent weight_g volume_ml volume_water_ml #> 1                        0      100        NA              NA #> 2                        0       NA       100              NA #> 3                        0       NA       100              NA #> 4                        3       25        NA             100 #> 5                        6       NA       100              NA #> 6                        0       NA       100              NA #> 7                        3       NA        50              NA #> 8                        3       25        NA              NA #> 9                        6       NA        20             100 #> 10                       6       NA       100              NA #>    custom_sg_adjusted #> 1                  NA #> 2                  NA #> 3                  NA #> 4                  NA #> 5                  NA #> 6                  NA #> 7                  NA #> 8                  NA #> 9                 125 #> 10                 NA example_data_sg_calc <- example_data %>%    rowwise() %>%    mutate( sg = SGConverter(pick(everything()))) %>%    select(everything(), sg)  print(\"Before setting custom values:\") #> [1] \"Before setting custom values:\" print(example_data_sg_calc$sg) #>  [1] 100.00 130.00 104.00 128.75 103.00 100.00  51.50  25.00 123.60 109.00  example_data_sg_calc$sg[[9]] <- example_data_sg_calc$custom_sg_adjusted[[9]]  print(\"After setting custom values:\") #> [1] \"After setting custom values:\" print(example_data_sg_calc$sg) #>  [1] 100.00 130.00 104.00 128.75 103.00 100.00  51.50  25.00 125.00 109.00 example_data_results <- example_data_sg_calc %>%    rowwise() %>%    mutate(test = NPMScore(pick(everything()), sg_adjusted_label=\"sg\")) %>%    unnest(test) %>%    rowwise() %>%   mutate(assess = NPMAssess(pick(everything()))) %>%   unnest(assess) %>%   select(everything(), energy_score, sugar_score, salt_score, fvn_score,   protein_score, satfat_score, fibre_score, NPM_score, NPM_assessment) names(example_data_results) #>  [1] \"name\"                    \"brand\"                   #>  [3] \"product_category\"        \"product_type\"            #>  [5] \"food_type\"               \"drink_format\"            #>  [7] \"drink_type\"              \"nutrition_info\"          #>  [9] \"energy_measurement_kj\"   \"energy_measurement_kcal\" #> [11] \"sugar_measurement_g\"     \"satfat_measurement_g\"    #> [13] \"salt_measurement_g\"      \"sodium_measurement_mg\"   #> [15] \"fibre_measurement_nsp\"   \"fibre_measurement_aoac\"  #> [17] \"protein_measurement_g\"   \"fvn_measurement_percent\" #> [19] \"weight_g\"                \"volume_ml\"               #> [21] \"volume_water_ml\"         \"custom_sg_adjusted\"      #> [23] \"sg\"                      \"energy_score\"            #> [25] \"sugar_score\"             \"satfat_score\"            #> [27] \"protein_score\"           \"salt_score\"              #> [29] \"fvn_score\"               \"fibre_score\"             #> [31] \"A_score\"                 \"C_score\"                 #> [33] \"NPM_score\"               \"NPM_assessment\"  example_data_results[c(\"name\", \"sg\", \"custom_sg_adjusted\", \"NPM_score\", \"NPM_assessment\")] #> # A tibble: 10 × 5 #>    name                  sg custom_sg_adjusted NPM_score NPM_assessment #>    <chr>              <dbl>              <dbl>     <dbl> <chr>          #>  1 lembas             100                   NA         8 FAIL           #>  2 zeno's icecream    130                   NA        11 FAIL           #>  3 mystic rush        104                   NA         5 FAIL           #>  4 delta ringer drink 129.                  NA         2 FAIL           #>  5 welter water       103                   NA         6 FAIL           #>  6 janus's drink      100                   NA        14 FAIL           #>  7 beta ringer drink   51.5                 NA         9 FAIL           #>  8 zeta ringer drink   25                   NA        16 FAIL           #>  9 heavyweight water  125                  125         5 FAIL           #> 10 bantam water       109                   NA         5 FAIL"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/custom_specific_gravity.html","id":"where-a-custom-conversion-factor-has-been-provided","dir":"Articles","previous_headings":"","what":"Where a custom conversion factor has been provided","title":"Custom specific gravity","text":", load required libraries data: dataset column called custom_sg_conversion empty except products custom specific gravity conversion factor provided. Now, calculate specific gravities usual, initially ignoring custom values. can use function generic_specific_gravity() calculate adjusted volumes. value want modify cordial, nutrition information provided assumes product prepared instructed (nutrition_info == \"Preparation instructions given\"); means need calculate adjusted specific gravity weight adding volume (ml) volume water (ml) provided using parameters along custom conversion factor generic_specific_gravity() function. can continue analysis using newly updated specific gravity values: results table looks much previous examples, addition custom_sg_conversion column record manual modification occurred.","code":"# load required libraries library(tidyr) library(dplyr) library(nutrientprofiler)  # read in the data example_data_2 <- read.csv(\"data/example_data_2.csv\") example_data_2 #>                  name brand product_category product_type food_type #> 1              lembas    NA               NA         Food           #> 2     zeno's icecream    NA               NA         Food Ice cream #> 3         mystic rush    NA               NA        Drink           #> 4  delta ringer drink    NA               NA        Drink           #> 5        welter water    NA               NA        Drink           #> 6       janus's drink    NA               NA         Food           #> 7   beta ringer drink    NA               NA        Drink           #> 8   zeta ringer drink    NA               NA        Drink           #> 9   heavyweight water    NA               NA        Drink           #> 10       bantam water    NA               NA        Drink           #>    drink_format             drink_type                     nutrition_info #> 1                                                                         #> 2                                                                         #> 3         Ready Carbonated/juice drink                                    #> 4      Powdered                            Preparation instructions given #> 5       Cordial                                               As consumed #> 6                                                                         #> 7      Powdered                                               As consumed #> 8      Powdered                        Preparation instructions not given #> 9       Cordial                            Preparation instructions given #> 10      Cordial                        Preparation instructions not given #>    energy_measurement_kj energy_measurement_kcal sugar_measurement_g #> 1                    266                      NA                  50 #> 2                     NA                      24                  21 #> 3                     NA                     194                  11 #> 4                    188                      NA                  15 #> 5                     NA                     205                  19 #> 6                     NA                      24                  21 #> 7                    188                      NA                  15 #> 8                    188                      NA                  15 #> 9                     NA                     205                  19 #> 10                    NA                     205                  19 #>    satfat_measurement_g salt_measurement_g sodium_measurement_mg #> 1                     3                 NA                   0.6 #> 2                    11               0.08                    NA #> 3                     0                 NA                 100.0 #> 4                     0                 NA                 100.0 #> 5                     0               0.10                    NA #> 6                    11               0.08                    NA #> 7                     0                 NA                 100.0 #> 8                     0                 NA                 100.0 #> 9                     0               0.10                    NA #> 10                    0               0.10                    NA #>    fibre_measurement_nsp fibre_measurement_aoac protein_measurement_g #> 1                      3                     NA                   7.0 #> 2                     NA                    0.7                   3.5 #> 3                     NA                    0.0                   0.0 #> 4                     NA                    0.0                   0.5 #> 5                     NA                    0.0                   0.1 #> 6                     NA                    0.7                   3.5 #> 7                     NA                    0.0                   0.5 #> 8                     NA                    0.0                   0.5 #> 9                     NA                    0.0                   0.1 #> 10                    NA                    0.0                   0.1 #>    fvn_measurement_percent weight_g volume_ml volume_water_ml #> 1                        0      100        NA              NA #> 2                        0       NA       100              NA #> 3                        0       NA       100              NA #> 4                        3       25        NA             100 #> 5                        6       NA       100              NA #> 6                        0       NA       100              NA #> 7                        3       NA        50              NA #> 8                        3       25        NA              NA #> 9                        6       NA        20             100 #> 10                       6       NA       100              NA #>    custom_sg_conversion #> 1                    NA #> 2                    NA #> 3                    NA #> 4                    NA #> 5                    NA #> 6                    NA #> 7                    NA #> 8                    NA #> 9                  0.83 #> 10                   NA example_data_sg_calc_2 <- example_data_2 %>%    rowwise() %>%    mutate( sg = SGConverter(pick(everything()))) %>%    select(everything(), sg) print(\"Before setting custom values:\") #> [1] \"Before setting custom values:\" print(example_data_sg_calc_2$sg) #>  [1] 100.00 130.00 104.00 128.75 103.00 100.00  51.50  25.00 123.60 109.00  example_data_sg_calc_2[9,] #> # A tibble: 1 × 23 #> # Rowwise:  #>   name     brand product_category product_type food_type drink_format drink_type #>   <chr>    <lgl> <lgl>            <chr>        <chr>     <chr>        <chr>      #> 1 heavywe… NA    NA               Drink        \"\"        Cordial      \"\"         #> # ℹ 16 more variables: nutrition_info <chr>, energy_measurement_kj <int>, #> #   energy_measurement_kcal <int>, sugar_measurement_g <int>, #> #   satfat_measurement_g <int>, salt_measurement_g <dbl>, #> #   sodium_measurement_mg <dbl>, fibre_measurement_nsp <int>, #> #   fibre_measurement_aoac <dbl>, protein_measurement_g <dbl>, #> #   fvn_measurement_percent <int>, weight_g <int>, volume_ml <int>, #> #   volume_water_ml <int>, custom_sg_conversion <dbl>, sg <dbl> # example_data_sg_calc$sg[[9]] <- example_data_sg_calc$custom_sg_adjusted[[9]]  row <- example_data_sg_calc_2[9,]  example_data_sg_calc_2$sg[[9]] <- generic_specific_gravity((as.numeric(row[[\"volume_water_ml\"]]) + as.numeric(row[[\"volume_ml\"]])),             row[[\"custom_sg_conversion\"]])  print(\"After setting custom values:\") #> [1] \"After setting custom values:\" print(example_data_sg_calc_2$sg) #>  [1] 100.00 130.00 104.00 128.75 103.00 100.00  51.50  25.00  99.60 109.00 example_data_results_2 <- example_data_sg_calc_2 %>%    rowwise() %>%    mutate(test = NPMScore(pick(everything()), sg_adjusted_label=\"sg\")) %>%    unnest(test) %>%    rowwise() %>%   mutate(assess = NPMAssess(pick(everything()))) %>%   unnest(assess) %>%   select(everything(), energy_score, sugar_score, salt_score, fvn_score,   protein_score, satfat_score, fibre_score, NPM_score, NPM_assessment) names(example_data_results_2) #>  [1] \"name\"                    \"brand\"                   #>  [3] \"product_category\"        \"product_type\"            #>  [5] \"food_type\"               \"drink_format\"            #>  [7] \"drink_type\"              \"nutrition_info\"          #>  [9] \"energy_measurement_kj\"   \"energy_measurement_kcal\" #> [11] \"sugar_measurement_g\"     \"satfat_measurement_g\"    #> [13] \"salt_measurement_g\"      \"sodium_measurement_mg\"   #> [15] \"fibre_measurement_nsp\"   \"fibre_measurement_aoac\"  #> [17] \"protein_measurement_g\"   \"fvn_measurement_percent\" #> [19] \"weight_g\"                \"volume_ml\"               #> [21] \"volume_water_ml\"         \"custom_sg_conversion\"    #> [23] \"sg\"                      \"energy_score\"            #> [25] \"sugar_score\"             \"satfat_score\"            #> [27] \"protein_score\"           \"salt_score\"              #> [29] \"fvn_score\"               \"fibre_score\"             #> [31] \"A_score\"                 \"C_score\"                 #> [33] \"NPM_score\"               \"NPM_assessment\"  example_data_results_2[c(\"name\", \"sg\", \"custom_sg_conversion\", \"NPM_score\", \"NPM_assessment\")] #> # A tibble: 10 × 5 #>    name                  sg custom_sg_conversion NPM_score NPM_assessment #>    <chr>              <dbl>                <dbl>     <dbl> <chr>          #>  1 lembas             100                  NA            8 FAIL           #>  2 zeno's icecream    130                  NA           11 FAIL           #>  3 mystic rush        104                  NA            5 FAIL           #>  4 delta ringer drink 129.                 NA            2 FAIL           #>  5 welter water       103                  NA            6 FAIL           #>  6 janus's drink      100                  NA           14 FAIL           #>  7 beta ringer drink   51.5                NA            9 FAIL           #>  8 zeta ringer drink   25                  NA           16 FAIL           #>  9 heavyweight water   99.6                 0.83         6 FAIL           #> 10 bantam water       109                  NA            5 FAIL"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/handling_input_data.html","id":"loading-an-example-template","dir":"Articles","previous_headings":"","what":"Loading an example template","title":"Handling input data","text":"possible, good idea ensure data required format yourload R. can achieved using template. nutrientprofiler package offers example dataset, cdrcdrinks. can saved example csv file edited loaded real data: Alternatively, just headers can saved, providing blank csv file can opened Excel editor choice:","code":"# Save an example csv file to your current working directory write.csv(cdrcdrinks, \"template_full.csv\", row.names = FALSE) # Save an example csv file to your current working directory write.csv(t(names(cdrcdrinks)), \"template_headings.csv\", row.names = FALSE)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/handling_input_data.html","id":"checking-column-names-and-renaming-parameters","dir":"Articles","previous_headings":"","what":"Checking column names and renaming parameters","title":"Handling input data","text":"raw data acquired different column names required, reproducible workflow can set rename parameters required. first step check existing column names: dataframe contains names expected, ’ll get message telling proceed analysis, example dataset . However, lets say loaded dataset csv irregular_data contain exact columns required: provides name column(s) match expected column name (\"fruit_nutrition_percent\" example), provides prompt use parameterRename() function. can copy hint replace <INSERT DATA COLUMN NAME > data matches listed missing_column_name: can now check required parameters available.","code":"inputDataCheck(cdrcdrinks) #> [1] \"All required column names found. Proceed with analysis.\" inputDataCheck(irregular_data) #> [1] \"The provided dataframe is missing the following required column names:\" #> [1] \"fvn_measurement_percent\" #> [1] \"The provided dataframe contains these unmatched columns names:\" #> [1] \"fruit_nutrition_percent\" #> [1] \"irregular_data <- parameterRename(missing_column_name = 'fvn_measurement_percent', associated_data_column = '<INSERT DATA COLUMN NAME HERE>', data_frame = irregular_data)\" irregular_data <- parameterRename(missing_column_name = 'fvn_measurement_percent', associated_data_column = 'fruit_nutrition_percent', data_frame = irregular_data) #> [1] \"Replacing fruit_nutrition_percent with fvn_measurement_percent\" inputDataCheck(irregular_data) #> [1] \"All required column names found. Proceed with analysis.\""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/handling_input_data.html","id":"missing-parameters","dir":"Articles","previous_headings":"","what":"Missing parameters","title":"Handling input data","text":"parameters optional, still need allocated column input data table. column can simply filled NA values. nutrientprofiler provides simple functions help achieve quickly. can see run inputDataCheck returns “unmatched columns”, suggesting data missing opposed unlabelled: can store list missing parameters using listMissingParameters function: happy optional parameters can filled NA values, can pass list (subset ) fillMissingParameters function: allows data processed bulk without triggerring errors related missing data.","code":"inputDataCheck(missing_data) #> [1] \"The provided dataframe is missing the following required column names:\" #> [1] \"brand\"            \"product_category\" #> [1] \"The provided dataframe contains these unmatched columns names:\" #> character(0) #> [1] \"missing_data <- parameterRename(missing_column_name = 'brand', associated_data_column = '<INSERT DATA COLUMN NAME HERE>', data_frame = missing_data)\"            #> [2] \"missing_data <- parameterRename(missing_column_name = 'product_category', associated_data_column = '<INSERT DATA COLUMN NAME HERE>', data_frame = missing_data)\" missing_params <- listMissingParameters(missing_data)  print(missing_params) #> [1] \"brand\"            \"product_category\" filled_data <- fillMissingParameters(missing_data, missing_params)  filled_data #>                  name product_type food_type drink_format #> 1              lembas         Food                        #> 2     zeno's icecream         Food Ice cream              #> 3         mystic rush        Drink                  Ready #> 4  delta ringer drink        Drink               Powdered #> 5        welter water        Drink                Cordial #> 6       janus's drink         Food                        #> 7   beta ringer drink        Drink               Powdered #> 8   zeta ringer drink        Drink               Powdered #> 9   heavyweight water        Drink                Cordial #> 10       bantam water        Drink                Cordial #>                drink_type                     nutrition_info #> 1                                                            #> 2                                                            #> 3  Carbonated/juice drink                                    #> 4                             Preparation instructions given #> 5                                                As consumed #> 6                                                            #> 7                                                As consumed #> 8                         Preparation instructions not given #> 9                             Preparation instructions given #> 10                        Preparation instructions not given #>    energy_measurement_kj energy_measurement_kcal sugar_measurement_g #> 1                    266                      NA                  50 #> 2                     NA                      24                  21 #> 3                     NA                     194                  11 #> 4                    188                      NA                  15 #> 5                     NA                     205                  19 #> 6                     NA                      24                  21 #> 7                    188                      NA                  15 #> 8                    188                      NA                  15 #> 9                     NA                     205                  19 #> 10                    NA                     205                  19 #>    satfat_measurement_g salt_measurement_g sodium_measurement_mg #> 1                     3                 NA                   0.6 #> 2                    11               0.08                    NA #> 3                     0                 NA                 100.0 #> 4                     0                 NA                 100.0 #> 5                     0               0.10                    NA #> 6                    11               0.08                    NA #> 7                     0                 NA                 100.0 #> 8                     0                 NA                 100.0 #> 9                     0               0.10                    NA #> 10                    0               0.10                    NA #>    fibre_measurement_nsp fibre_measurement_aoac protein_measurement_g #> 1                      3                     NA                   7.0 #> 2                     NA                    0.7                   3.5 #> 3                     NA                    0.0                   0.0 #> 4                     NA                    0.0                   0.5 #> 5                     NA                    0.0                   0.1 #> 6                     NA                    0.7                   3.5 #> 7                     NA                    0.0                   0.5 #> 8                     NA                    0.0                   0.5 #> 9                     NA                    0.0                   0.1 #> 10                    NA                    0.0                   0.1 #>    fvn_measurement_percent weight_g volume_ml volume_water_ml brand #> 1                        0      100        NA              NA    NA #> 2                        0       NA       100              NA    NA #> 3                        0       NA       100              NA    NA #> 4                        3       25        NA             100    NA #> 5                        6       NA       100              NA    NA #> 6                        0       NA       100              NA    NA #> 7                        3       NA        50              NA    NA #> 8                        3       25        NA              NA    NA #> 9                        6       NA        20             100    NA #> 10                       6       NA       100              NA    NA #>    product_category #> 1                NA #> 2                NA #> 3                NA #> 4                NA #> 5                NA #> 6                NA #> 7                NA #> 8                NA #> 9                NA #> 10               NA"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/handling_input_data.html","id":"data-validity","dir":"Articles","previous_headings":"","what":"Data validity","title":"Handling input data","text":"Please see article Preprocessing input data see advice check whether parameters valid within range expected, fix typos dataset.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/handling_input_data.html","id":"missing-data","dir":"Articles","previous_headings":"","what":"Missing data","title":"Handling input data","text":"Certain parameters required certain product types, included functions check necessary parameters present specific product.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/handling_input_data.html","id":"find-out-what-data-is-missing","dir":"Articles","previous_headings":"Missing data","what":"Find out what data is missing","title":"Handling input data","text":"can transpose print table see many rows missing values parameter: addition, certain parameters automatically assigned defaults missing (\"drink_format\", \"food_type\", \"drink_type\"). can also check parameters missing using AutoDefaultParamCheck() function. adds indices rows missing values report dataframe object: “automatic defaults” can recorded dataframe product data using AutoDefaultParamNote() function, default_params_used column: can use report generated ReqParamCheck() AutoDefaultParamCheck() discover parameters missing detail. printed transposed report table (using t(report_table)), saw parameters read NA - optional parameters checked. parameters read integer, 0 meaning parameters checked, data missing product entries parameter required. data missing, integer, NUM repeated non-zero value place NUM, example sugar_measurement_g reads integer, 3. can interogate product entries missing data sugar_measurement_g using double bracket notation:","code":"report_table <- ReqParamCheck(incomplete_data) #> [1] \"Please note that the following parameters are optional and are not checked here:\" #> [1] \"name\"             \"brand\"            \"product_category\" #> [1] \"Please note that the following parameters have automatically applied defaults if missing and are not checked by this function:\" #> [1] \"drink_format\" \"food_type\"    \"drink_type\"   #> [1] \"If you wish to check the presence of these parameters and record when defaults are used,\" #> [1] \"please see the `AutoDefaultParamCheck()` and `AutoDefaultParamNote()` functions\" #> [1] \"Please see the `SaveReport()` function to output a csv version of this report table.\" t(report_table) #>                         [,1]      #> name                    NA        #> brand                   NA        #> product_category        NA        #> product_type            integer,0 #> food_type               NA        #> drink_format            NA        #> drink_type              NA        #> nutrition_info          integer,0 #> energy_measurement_kj   integer,0 #> energy_measurement_kcal NA        #> sugar_measurement_g     integer,3 #> satfat_measurement_g    integer,0 #> salt_measurement_g      integer,0 #> sodium_measurement_mg   NA        #> fibre_measurement_nsp   integer,0 #> fibre_measurement_aoac  NA        #> protein_measurement_g   integer,0 #> fvn_measurement_percent integer,0 #> weight_g                integer,0 #> volume_ml               NA        #> volume_water_ml         integer,0 report_table <- AutoDefaultParamCheck(incomplete_data, report_table) incomplete_data <- AutoDefaultParamNote(incomplete_data, report_table) #> [1] \"Checking drink_format\" #> [1] \"Checking food_type\" #> [1] \"Checking drink_type\"  incomplete_data #>                  name brand product_category product_type food_type #> 1              lembas    NA               NA         Food           #> 2     zeno's icecream    NA               NA         Food Ice cream #> 3         mystic rush    NA               NA        Drink           #> 4  delta ringer drink    NA               NA        Drink           #> 5        welter water    NA               NA        Drink           #> 6       janus's drink    NA               NA         Food           #> 7   beta ringer drink    NA               NA        Drink           #> 8   zeta ringer drink    NA               NA        Drink           #> 9   heavyweight water    NA               NA        Drink           #> 10       bantam water    NA               NA        Drink           #>    drink_format             drink_type                     nutrition_info #> 1                                                                         #> 2                                                                         #> 3         Ready Carbonated/juice drink                                    #> 4      Powdered                            Preparation instructions given #> 5       Cordial                                               As consumed #> 6                                                                         #> 7      Powdered                                               As consumed #> 8      Powdered                        Preparation instructions not given #> 9       Cordial                            Preparation instructions given #> 10      Cordial                        Preparation instructions not given #>    energy_measurement_kj energy_measurement_kcal sugar_measurement_g #> 1                    266                      NA                     #> 2                     NA                      24                     #> 3                     NA                     194                  11 #> 4                    188                      NA                     #> 5                     NA                     205                  19 #> 6                     NA                      24                  21 #> 7                    188                      NA                  15 #> 8                    188                      NA                  15 #> 9                     NA                     205                  19 #> 10                    NA                     205                  19 #>    satfat_measurement_g salt_measurement_g sodium_measurement_mg #> 1                     3                 NA                   0.6 #> 2                    11               0.08                    NA #> 3                     0                 NA                 100.0 #> 4                     0                 NA                 100.0 #> 5                     0               0.10                    NA #> 6                    11               0.08                    NA #> 7                     0                 NA                 100.0 #> 8                     0                 NA                 100.0 #> 9                     0               0.10                    NA #> 10                    0               0.10                    NA #>    fibre_measurement_nsp fibre_measurement_aoac protein_measurement_g #> 1                      3                     NA                   7.0 #> 2                     NA                    0.7                   3.5 #> 3                     NA                    0.0                   0.0 #> 4                     NA                    0.0                   0.5 #> 5                     NA                    0.0                   0.1 #> 6                     NA                    0.7                   3.5 #> 7                     NA                    0.0                   0.5 #> 8                     NA                    0.0                   0.5 #> 9                     NA                    0.0                   0.1 #> 10                    NA                    0.0                   0.1 #>    fvn_measurement_percent weight_g volume_ml volume_water_ml #> 1                        0      100        NA              NA #> 2                        0       NA       100              NA #> 3                        0       NA       100              NA #> 4                        3       25        NA             100 #> 5                        6       NA       100              NA #> 6                        0       NA       100              NA #> 7                        3       NA        50              NA #> 8                        3       25        NA              NA #> 9                        6       NA        20             100 #> 10                       6       NA       100              NA #>    default_params_used #> 1            food_type #> 2                 <NA> #> 3                 <NA> #> 4           drink_type #> 5           drink_type #> 6            food_type #> 7           drink_type #> 8           drink_type #> 9           drink_type #> 10          drink_type report_table$sugar_measurement_g[[1]] #> [1] 1 2 4"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/handling_input_data.html","id":"fill-missing-data","dir":"Articles","previous_headings":"Missing data","what":"Fill missing data","title":"Handling input data","text":"can enter data sugar_measurement_g products indices 1 2 4 using ManualParamUpdate() function. function takes following arguments: data_frame, product data.frame object analysed, case incomplete_data; parameter_name - case \"sugar_measurement_g\"; index_list - can supplied manually report shown ; value - value set parameter rows. going use unrealistically high value 100.0 order clearly see applied. values required numeric, can coerce values numeric type: can see updated sugar_measurement_g values dataframe, coercion: updated dataframe can used analysis workflow examples given documentation:","code":"updated_data <- ManualParamUpdate(   incomplete_data,   \"sugar_measurement_g\",   report_table$sugar_measurement_g[[1]],   100.0) updated_data$sugar_measurement_g <- as.numeric(updated_data$sugar_measurement_g) # Update sugar values: print(updated_data$sugar_measurement_g) #>  [1] \"100\" \"100\" \"11\"  \"100\" \"19\"  \"21\"  \"15\"  \"15\"  \"19\"  \"19\"  updated_data$sugar_measurement_g <- as.numeric(updated_data$sugar_measurement_g)  # Record of where parameters have been manually edited/applied: print(updated_data$manual_params_used) #>  [1] \"sugar_measurement_g\" \"sugar_measurement_g\" NA                    #>  [4] \"sugar_measurement_g\" NA                    NA                    #>  [7] NA                    NA                    NA                    #> [10] NA library(tidyr) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  updated_data_results <- updated_data %>%    rowwise() %>%    mutate( sg = SGConverter(pick(everything()))) %>%    mutate(test = NPMScore(pick(everything()), sg_adjusted_label=\"sg\")) %>%    unnest(test) %>%    rowwise() %>%   mutate(assess = NPMAssess(pick(everything()))) %>%   unnest(assess) %>%   select(everything(), energy_score, sugar_score, salt_score, fvn_score,   protein_score, satfat_score, fibre_score, NPM_score, NPM_assessment)"},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_assessment.html","id":"a-and-c-score-calculators","dir":"Articles","previous_headings":"","what":"A and C score calculators","title":"Nutrient Profile Model Assessment","text":"first component NPMAssess step calculate C scores. involves two functions: A_scorer C_scorer accept number arguments corresponding appropriate nutrient score sum . A_scorer takes 4 arguments: energy_score, sugar_score, salt_score satfat_score. scores calculated previous NPMScore step summed A_scorer function return compound score. C_scorer takes 3 arguments: fvn_score (fruit, vegetable nut score), protein_score fibre_score calculates sum return C score.","code":"A_scorer(energy_score = 3, sugar_score = 5, salt_score = 1, satfat_score = 2) #> [1] 11  C_scorer(fvn_score = 2, protein_score = 3, fibre_score = 1) #> [1] 6"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_assessment.html","id":"nutrient-profile-model-score","dir":"Articles","previous_headings":"","what":"Nutrient Profile Model Score","title":"Nutrient Profile Model Assessment","text":"computing C scores ’re able calculate overall Nutrient Profile Model Score product. method computing score conditional size C score can circumstances take account fibre score fruit, vegetables nut score. Therefore NPM_total function takes 4 arguments: a_score, c_score, fvn_score, fibre_score. function works subtracting C score score. However, score greater equal 11 fruit, vegetable nut score less 5, function performs different calculation substracts sum fibre score fruit, vegetables nut score score. follows logic defined Technical Guidance Nutrient Profile modelling.","code":"NPM_total(7, 2, 1, 1)  # example using keyword arguments NPM_total(a_score = 10, c_score = 4, fvn_score = 1, fibre_score = 2)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_assessment.html","id":"nutrient-profile-model-assessment","dir":"Articles","previous_headings":"","what":"Nutrient Profile Model Assessment","title":"Nutrient Profile Model Assessment","text":"determining overall score product within Nutrient Profile Model final step assess score determine product passes fails. simple test whether score specific threshold threshold differs product food drink. product food NPM score 4 leads failure, whilst drink product fails NPM scores 1 . NPM_assess works accepting two arguments: NPM_score type. type determines product food drink accepting either food drink whilst NPM_score numeric value calculated prior NPM_total step. function returns character vector single value either \"PASS\" \"FAIL\".","code":"# pass NPM_assess(3, \"food\") #> [1] \"PASS\"  # fail NPM_assess(6, type = \"drink\") #> [1] \"FAIL\""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_scoring.html","id":"adjuster-functions","dir":"Articles","previous_headings":"","what":"Adjuster functions","title":"Nutrient Profile Model Scoring","text":"Nutritional values need adjusted scoring ensure: nutritional information adjusted based nutrient denisty standardised 100g product rather total amount enable better comparisons products converted appropriate unit scoring thresholds adjuster functions built ontop generic_adjuster function. takes value argument amount nutritional category divides second argument adjusted_weight corresponds specific gravity adjusted weight/volume product determined using specific gravity functions . output multiplied 100 give final adjusted value.","code":"generic_adjuster(10, 15) #> [1] 66.66667"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_scoring.html","id":"energy-and-salt-adjustments","dir":"Articles","previous_headings":"Adjuster functions","what":"Energy and salt adjustments","title":"Nutrient Profile Model Scoring","text":"enough adjusting nutritional values energy salt need additional steps properly adjust value appropriate units. energy nutritional information can either kcal kJ salt can either listed sodium measurement mg salt measurement g. scoring thresholds Nutrient Profile Model specified kJ energy mg sodium salt additional steps needed properly adjust values present alternate unit. handled specific adjuster functions energy salt also take adjuster_type argument specify units passed value.","code":"# for energy in kj energy_value_adjuster(10, 80, adjuster_type=\"kj\") #> [1] 12.5  # for energy in kcal energy_value_adjuster(60, 300, adjuster_type=\"kj\") #> [1] 20  # for salt in grams salt_adjuster(3, 100, adjuster_type=\"salt\") #> [1] 1200  # for salt in mg of sodium salt_adjuster(60, 100, adjuster_type=\"sodium\") #> [1] 60"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_scoring.html","id":"scoring-function","dir":"Articles","previous_headings":"","what":"Scoring function","title":"Nutrient Profile Model Scoring","text":"adjuster functions return adjusted value nutritional information ensure can calculate NPM Score based 100g product. use adjusted value subsequent step actually calculating score nutrient groups. performed using NPM_score_function acts dispatcher function takes value type arguments determine adjustment function call scoring thresholds use. function also takes optional additional arguments specifying adjusted_weight can passed adjuster functions adjuster_type argument types energy salt. hood function calling generic_adjuster adjust nutritional value using adjusted_weight, next passes adjusted value scoring_function. scoring_function determines score value based provided score thresholds. scoring_function behaves taking vector thresholds descending order. First sets score total number thresholds available (.e. 3 example). takes value provided checks value greater item thresholds vector, greater item thresholds returns score corresponding item. value isn’t greater item score, set earlier, deducted 1. continues item thresholds option left value greater final item thresholds leading score 0.","code":"# calculate a score for a protein value NPM_score_function(80, adjusted_weight=100, \"protein\") #> [1] 5 # create thesholds vector from largest to smallest THRESHOLDS <- c(3, 2, 1)  # score the value 1 against the provided thresholds # returns 0 scoring_function(1, THRESHOLDS) #> [1] 0  # returns 2 scoring_function(2.1, THRESHOLDS) #> [1] 2"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofile_scoring.html","id":"fruit-vegetables-and-nuts-scoring","dir":"Articles","previous_headings":"Scoring function","what":"Fruit, vegetables and nuts scoring","title":"Nutrient Profile Model Scoring","text":"one exception scoring function fruit, vegetables nuts. nutritional information presented percentage scoring specified Nutrient Profile Model doesn’t score continuous manner package includes specific fruit_veg_nut_scorer. function takes value returns score (either 0, 1, 2 5) depending value meets specific percentage threshold.","code":"# scores a 5 fruit_veg_nut_scorer(81) #> [1] 5  # scores a 2 fruit_veg_nut_scorer(70) #> [1] 2  # scores a 1 fruit_veg_nut_scorer(45) #> [1] 1  # scores a 0 fruit_veg_nut_scorer(20) #> [1] 0"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofiler.html","id":"specific-gravity-conversions","dir":"Articles","previous_headings":"","what":"Specific gravity conversions","title":"Introduction to nutrientprofiler","text":"trying determine NPM score volume weight product needs adjusted account ’s specific gravity. adjust product weights volumes specific gravity use SGConverter function. high level function designed operate row data.frame parsing multiple columns determine calculate adjusted specific gravity score. figure attempts outline hierarchy function calls SGConverter initiates. logic determining adjust values specific gravity complicated potential options around whether drink ready--drink, powdered preparation, cordial, within powdered cordial options additional consideration must given preparation instructions provided. figure function named node column name function uses dispatch underlying functions specified single quotes. function returns value marked empty diamond. SGConverter logic","code":"Warning: The `SGConverter` function has been specifically designed with an existing dataset in mind and expects specific column names to work. # using dplyr library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union cdrcdrinks %>%   rowwise() %>%   mutate(out = SGConverter(pick(everything()))) %>%   select(out) #> # A tibble: 10 × 1 #> # Rowwise:  #>      out #>    <dbl> #>  1 100   #>  2 130   #>  3 104   #>  4 129.  #>  5 103   #>  6 100   #>  7  51.5 #>  8  25   #>  9 124.  #> 10 109  # using base R cdrcdrinks[\"sg\"] <- unlist(lapply(seq_len(nrow(cdrcdrinks)), function(i) SGConverter(cdrcdrinks[i, ])))"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofiler.html","id":"nutrient-profile-model-scoring","dir":"Articles","previous_headings":"","what":"Nutrient profile model scoring","title":"Introduction to nutrientprofiler","text":"next part package series functions handling Nutrient Profile Model scoring. specifically look functions adjusting units expected unit documented Nutrient Profile Model, generic scoring function returning score value given number thresholds, scoring dispatcher function determines adjuster scoring thresholds use given value high level NPMScore wrapper function shows logic calculating NPM score across multiple nutritional groups data.frame data. quick example running NPMScore across single row data shown : example building tidyverse pipeline calculate scores across rows data.frame using NPMScore SGConverter shown :","code":"NPMScore(cdrcdrinks[1,], sg_adjusted_label=\"sg\") #>   energy_score sugar_score satfat_score protein_score salt_score fvn_score #> 1            0          10            2             4          0         0 #>   fibre_score #> 1           4 library(tidyr)  cdrcdrinks %>%    rowwise() %>%    mutate( sg = SGConverter(pick(everything()))) %>%    mutate(test = NPMScore(pick(everything()), sg_adjusted_label=\"sg\")) %>%    unnest(test) %>% select(energy_score, sugar_score, salt_score, fvn_score,   protein_score, satfat_score, fibre_score) #> # A tibble: 10 × 7 #>    energy_score sugar_score salt_score fvn_score protein_score satfat_score #>           <dbl>       <dbl>      <dbl>     <dbl>         <dbl>        <dbl> #>  1            0          10          0         0             4            2 #>  2            0           3          0         0             1            8 #>  3            2           2          1         0             0            0 #>  4            0           2          0         0             0            0 #>  5            2           4          0         0             0            0 #>  6            0           4          0         0             2           10 #>  7            1           6          2         0             0            0 #>  8            2          10          4         0             1            0 #>  9            2           3          0         0             0            0 #> 10            2           3          0         0             0            0 #> # ℹ 1 more variable: fibre_score <dbl>"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/nutrientprofiler.html","id":"nutrient-profile-model-assessment","dir":"Articles","previous_headings":"","what":"Nutrient Profile Model assessment","title":"Introduction to nutrientprofiler","text":"calculating scores specific nutrients product next need perform actual Nutrient Profile Model assessment. involves combining individual nutrient scores calculate score C score use compound calculate total Nutrient Profile Model score assess determine pass fail. package implements logic high-level wrapper function called NPMAssess operates row data.frame. expects columns generated previous NPMScore step allow calculate score C score can used follows: can also use tidyverse functions build entire pipeline running Nutrient Profile Model assessments. building blocks NPMAssess explained detail Nutrient Profile Model Assessment vignette","code":"# create NPM_score data.frame from NPMScore # using the specific gravity `sg` column created above npm_scores <- do.call(         \"rbind\",         lapply(             seq_len(nrow(cdrcdrinks)),             function(i) NPMScore(cdrcdrinks[i, ], sg_adjusted_label = \"sg\")         )     )  # append NPM Score columns to original data combo_df <- cbind(cdrcdrinks, npm_scores)  # test NPMAssess on this data NPMAssess(combo_df[1, ]) #>   A_score C_score NPM_score NPM_assessment #> 1      12       8         8           FAIL # using tidyr library(tidyr)  cdrcdrinks %>%    rowwise() %>%    mutate( sg = SGConverter(pick(everything()))) %>%    mutate(test = NPMScore(pick(everything()), sg_adjusted_label=\"sg\")) %>%    unnest(test) %>%    rowwise() %>%   mutate(assess = NPMAssess(pick(everything()))) %>%   unnest(assess) %>%   select(product_type, NPM_score, NPM_assessment) #> # A tibble: 10 × 3 #>    product_type NPM_score NPM_assessment #>    <chr>            <dbl> <chr>          #>  1 Food                 8 FAIL           #>  2 Food                11 FAIL           #>  3 Drink                5 FAIL           #>  4 Drink                2 FAIL           #>  5 Drink                6 FAIL           #>  6 Food                14 FAIL           #>  7 Drink                9 FAIL           #>  8 Drink               16 FAIL           #>  9 Drink                5 FAIL           #> 10 Drink                5 FAIL"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/preprocessing.html","id":"checking-input-data-column-names","dir":"Articles","previous_headings":"","what":"Checking input data column names","title":"Preprocessing input data","text":"array functions check parameter names missing parameters, useful able manually check input data base R library like tidyr dplyr additionally. can check column names loaded dataframe using base R: can compare parameter names expected parameters nutrientprofiler uses analysis using inputDataCheck() function: required, parameter names can fixed point using parameterRename() fillMissingParameters() functions.","code":"# Print out your data column names names(example_data) #>  [1] \"name\"                    \"brand\"                   #>  [3] \"product_category\"        \"product_type\"            #>  [5] \"food_type\"               \"drink_format\"            #>  [7] \"drink_type\"              \"nutrition_info\"          #>  [9] \"energy_measurement_kj\"   \"energy_measurement_kcal\" #> [11] \"sugar_measurement_g\"     \"satfat_measurement_g\"    #> [13] \"salt_measurement_g\"      \"sodium_measurement_mg\"   #> [15] \"fibre_measurement_nsp\"   \"fibre_measurement_aoac\"  #> [17] \"protein_measurement_g\"   \"fvn_measurement_percent\" #> [19] \"weight_g\"                \"volume_ml\"               #> [21] \"volume_water_ml\" inputDataCheck(example_data) #> [1] \"All required column names found. Proceed with analysis.\""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/preprocessing.html","id":"checking-input-data-values","dir":"Articles","previous_headings":"","what":"Checking input data values","title":"Preprocessing input data","text":"Next, can use CheckValues() function produce overview values stored dataframe: can read compare parameter table provided documentation, can save output csv file future reference: example, values typos cause issues: Powder instead Powdered; Carbted/juice drink instead Carbonated/juice drink; Prep. instructions given instead Preparation instructions given. clear cases typos like , can easily replace incorrect values.","code":"overview_of_values <- CheckValues(example_data) print(overview_of_values) #>             Parameter_name Count_unique_values #> 1                     name                  10 #> 2                    brand                   1 #> 3         product_category                   1 #> 4             product_type                   2 #> 5                food_type                   2 #> 6             drink_format                   5 #> 7               drink_type                   2 #> 8           nutrition_info                   5 #> 9    energy_measurement_kj                   3 #> 10 energy_measurement_kcal                   4 #> 11     sugar_measurement_g                   5 #> 12    satfat_measurement_g                   3 #> 13      salt_measurement_g                   3 #> 14   sodium_measurement_mg                   3 #> 15   fibre_measurement_nsp                   2 #> 16  fibre_measurement_aoac                   3 #> 17   protein_measurement_g                   5 #> 18 fvn_measurement_percent                   3 #> 19                weight_g                   3 #> 20               volume_ml                   4 #> 21         volume_water_ml                   2 #>                                                                                                                                                   Unique_values #> 1  lembas, zeno's icecream, mystic rush, delta ringer drink, welter water, janus's drink, beta ringer drink, zeta ringer drink, heavyweight water, bantam water #> 2                                                                                                                                                            NA #> 3                                                                                                                                                            NA #> 4                                                                                                                                                   Food, Drink #> 5                                                                                                                                                   , Ice cream #> 6                                                                                                                            , Ready, Powdered, Cordial, Powder #> 7                                                                                                                                         , Carbted/juice drink #> 8                                               , Preparation instructions given, As consumed, Prep. instructions not given, Preparation instructions not given #> 9                                                                                                                                                  266, NA, 188 #> 10                                                                                                                                             NA, 24, 194, 205 #> 11                                                                                                                                           50, 21, 11, 15, 19 #> 12                                                                                                                                                     3, 11, 0 #> 13                                                                                                                                                NA, 0.08, 0.1 #> 14                                                                                                                                                 0.6, NA, 100 #> 15                                                                                                                                                        3, NA #> 16                                                                                                                                                   NA, 0.7, 0 #> 17                                                                                                                                          7, 3.5, 0, 0.5, 0.1 #> 18                                                                                                                                                      0, 3, 6 #> 19                                                                                                                                                  100, NA, 25 #> 20                                                                                                                                              NA, 100, 50, 20 #> 21                                                                                                                                                      NA, 100 write.csv(overview_of_values, \"path/to/output/file.csv\", row.names=FALSE) print(overview_of_values[6,]) #>   Parameter_name Count_unique_values                      Unique_values #> 6   drink_format                   5 , Ready, Powdered, Cordial, Powder print(overview_of_values[7,]) #>   Parameter_name Count_unique_values         Unique_values #> 7     drink_type                   2 , Carbted/juice drink print(overview_of_values[8,]) #>   Parameter_name Count_unique_values #> 8 nutrition_info                   5 #>                                                                                                     Unique_values #> 8 , Preparation instructions given, As consumed, Prep. instructions not given, Preparation instructions not given"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/preprocessing.html","id":"fixing-typos","dir":"Articles","previous_headings":"","what":"Fixing typos","title":"Preprocessing input data","text":"can easily fix typos dataset using following script. kept separate applying new values applying defaults described Handling Input Data article, additional column added record values overwritten. updating place, can check captured incorrect values: Note large dataset thousands values, number unique values numerical parameters weight_g high. Instead printing full table, instead use subsets initial overview. can subset overview table using code like : allows identify categorical parameters (manageable numbers unique values) print rows individually:","code":"example_data$drink_format[example_data$drink_format==\"Powder\"] <- \"Powdered\" example_data$drink_type[example_data$drink_type==\"Carbted/juice drink\"] <- \"Carbonated/juice drink\" example_data$nutrition_info[example_data$nutrition_info==\"Prep. instructions not given\"] <- \"Preparation instructions not given\" CheckValues(example_data) #>             Parameter_name Count_unique_values #> 1                     name                  10 #> 2                    brand                   1 #> 3         product_category                   1 #> 4             product_type                   2 #> 5                food_type                   2 #> 6             drink_format                   4 #> 7               drink_type                   2 #> 8           nutrition_info                   4 #> 9    energy_measurement_kj                   3 #> 10 energy_measurement_kcal                   4 #> 11     sugar_measurement_g                   5 #> 12    satfat_measurement_g                   3 #> 13      salt_measurement_g                   3 #> 14   sodium_measurement_mg                   3 #> 15   fibre_measurement_nsp                   2 #> 16  fibre_measurement_aoac                   3 #> 17   protein_measurement_g                   5 #> 18 fvn_measurement_percent                   3 #> 19                weight_g                   3 #> 20               volume_ml                   4 #> 21         volume_water_ml                   2 #>                                                                                                                                                   Unique_values #> 1  lembas, zeno's icecream, mystic rush, delta ringer drink, welter water, janus's drink, beta ringer drink, zeta ringer drink, heavyweight water, bantam water #> 2                                                                                                                                                            NA #> 3                                                                                                                                                            NA #> 4                                                                                                                                                   Food, Drink #> 5                                                                                                                                                   , Ice cream #> 6                                                                                                                                    , Ready, Powdered, Cordial #> 7                                                                                                                                      , Carbonated/juice drink #> 8                                                                             , Preparation instructions given, As consumed, Preparation instructions not given #> 9                                                                                                                                                  266, NA, 188 #> 10                                                                                                                                             NA, 24, 194, 205 #> 11                                                                                                                                           50, 21, 11, 15, 19 #> 12                                                                                                                                                     3, 11, 0 #> 13                                                                                                                                                NA, 0.08, 0.1 #> 14                                                                                                                                                 0.6, NA, 100 #> 15                                                                                                                                                        3, NA #> 16                                                                                                                                                   NA, 0.7, 0 #> 17                                                                                                                                          7, 3.5, 0, 0.5, 0.1 #> 18                                                                                                                                                      0, 3, 6 #> 19                                                                                                                                                  100, NA, 25 #> 20                                                                                                                                              NA, 100, 50, 20 #> 21                                                                                                                                                      NA, 100 overview_of_values[c(\"Parameter_name\", \"Count_unique_values\")] #>             Parameter_name Count_unique_values #> 1                     name                  10 #> 2                    brand                   1 #> 3         product_category                   1 #> 4             product_type                   2 #> 5                food_type                   2 #> 6             drink_format                   5 #> 7               drink_type                   2 #> 8           nutrition_info                   5 #> 9    energy_measurement_kj                   3 #> 10 energy_measurement_kcal                   4 #> 11     sugar_measurement_g                   5 #> 12    satfat_measurement_g                   3 #> 13      salt_measurement_g                   3 #> 14   sodium_measurement_mg                   3 #> 15   fibre_measurement_nsp                   2 #> 16  fibre_measurement_aoac                   3 #> 17   protein_measurement_g                   5 #> 18 fvn_measurement_percent                   3 #> 19                weight_g                   3 #> 20               volume_ml                   4 #> 21         volume_water_ml                   2 # Printing using the row index print(overview_of_values[6,]) #>   Parameter_name Count_unique_values                      Unique_values #> 6   drink_format                   5 , Ready, Powdered, Cordial, Powder  # Printing using the parameter name print(overview_of_values[which(overview_of_values$Parameter_name == \"drink_format\"),]) #>   Parameter_name Count_unique_values                      Unique_values #> 6   drink_format                   5 , Ready, Powdered, Cordial, Powder"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/preprocessing.html","id":"check-validity-of-numeric-data","dir":"Articles","previous_headings":"","what":"Check validity of numeric data","title":"Preprocessing input data","text":"order check numeric values, can use max minimum values (measures average desired) check values within expected bounds using basic mathematical functions column interest original product data dataframe: Individual values can interrogated, plotted parameters using graphics library like ggplot, replaced similar way described character-type entries. Please see Handling Input Data pre-processing steps beyond point.","code":"print(\"protein_measurement_g values\") #> [1] \"protein_measurement_g values\" print(paste(\"Max:\", max(example_data$protein_measurement_g))) #> [1] \"Max: 7\" print(paste(\"Min.:\", min(example_data$protein_measurement_g))) #> [1] \"Min.: 0\" print(paste(\"Mean:\", mean(example_data$protein_measurement_g))) #> [1] \"Mean: 1.58\" print(paste(\"Median:\", median(example_data$protein_measurement_g))) #> [1] \"Median: 0.5\""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/specific_gravity.html","id":"breaking-down-sgconverter","dir":"Articles","previous_headings":"","what":"Breaking down SGConverter","title":"Specific Gravity Adjustment","text":"SGConverter works taking row data.frame ’s argument. checks row column called product_type. column used define whether product either \"food\" \"drink\". value column used SGConverter determine whether pass row either sg_food_converter function sg_drink_converter function.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/specific_gravity.html","id":"calculating-specific-gravity-for-food","dir":"Articles","previous_headings":"Breaking down SGConverter","what":"Calculating specific gravity for food","title":"Specific Gravity Adjustment","text":"SGConverter passed product_type \"food\" passes row sg_food_converter. function simple test whether row contains column called weight_g, column doesn’t contain NA returns value contained weight_g don’t adjust specific gravity. weight_g column contain NA row dispatches sg_liquidfood_converter function. sg_liquidfood_converter checks food_type column contains type value match product included SGtab vector. sg_liquidfood_converter checks food_type column empty string, true calculates specific gravity adjusted volume getting value volume_ml column row multiplying specific gravity value SGtab indexed vector using food_type column value passed row.","code":"# example of how sg_food_converter behaves library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  data <- data.frame(weight_g = c(100, NA, NA),                    volume_ml = c(NA, 10, 100),                     product_type = c(\"food\",\"food\",\"food\"),                    food_type = c(\"\",\"Ice cream\", \"Semi-skimmed milk\"))  sg_food_converter(data[1, ]) #> [1] 100  # on all rows with dplyr data %>%   rowwise() %>%   mutate(sg = sg_food_converter(pick(everything()))) %>%   select(sg) #> # A tibble: 3 × 1 #> # Rowwise:  #>      sg #>   <dbl> #> 1   100 #> 2    13 #> 3   103"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/specific_gravity.html","id":"calculating-specific-gravity-for-drinks","dir":"Articles","previous_headings":"Breaking down SGConverter","what":"Calculating specific gravity for drinks","title":"Specific Gravity Adjustment","text":"logic calculating specific gravity drinks slightly complicated. SGConverter function found \"drink\" specified product_type column dispatches row sg_drink_converter function. checks row column called drink_format specifies whether drink either: ready drink, cordial powdered drink (\"ready\", \"cordial\", \"powdered\"). options sg_drink_converter dispatches row additional function. \"ready\" dispatches sg_ready_drink_converter. function checks row contains drink_type column row contains empty string. contain empty string calls generic_specific_gravity function passing volume_ml column value specific gravity multiplier indexed SGtab based value drink_type. drink_type contain empty string just returns volume_ml column value. \"cordial\" dispatches sg_cord_drink_converter. function checks row nutrition_info column help determine proceed. column contains information drink consumed, whether directly consumed, following preparation instructions dilute cordial instructions provided (\"consumed\", \"preparation instructions given\", \"preparation instructions given\"). nutrition_info \"consumed\" volume_ml column value specific gravity multipler SGtab \"Cordial/squash ready drink\" passed generic_specific_gravity function. \"preparation instructions given\" expectation additional column row volume_water_ml specifies volume water used dilute cordial. \"preparation instructions given\" found nutrition_info column computes sum volume_ml volume_water_ml columns passes generic_specific_gravity along specific gravity multipler SGtab \"Cordial/squash ready drink\". \"preparation instructions given\" volume_ml column value passed generic_specific_gravity function along specific gravity multiplier indexed SGtab \"Cordial/squash undiluted\". drink_format column value \"powdered\" dispatches sg_powd_drink_converter function. checks row values nutrition_info column help determine compute specific gravity adjustment using 3 potential values defined cordial section. nutrition_info \"consumed\" volume_ml column value specific gravity multipler SGtab \"Cordial/squash ready drink\" passed generic_specific_gravity function. \"preparation instructions given\" expectation additional column row weight_g specifies weight grams powdered drink used. \"preparation instructions given\" found nutrition_info column computes sum weight_g volume_water_ml columns passes generic_specific_gravity along specific gravity multipler SGtab \"Cordial/squash ready drink\". \"preparation instructions given\" weight_g column value returned unadjusted.","code":"# example of how sg_ready_drink_converter behaves data <- data.frame(volume_ml = c(30, 10, 100),                   drink_type = c(\"Energy drink\",\"Ice cream\", \"Semi-skimmed milk\"))               sg_ready_drink_converter(data[1, ]) #> [1] 32.1  # on all rows with dplyr data %>%   rowwise() %>%   mutate(sg = sg_ready_drink_converter(pick(everything()))) %>%   select(sg) #> # A tibble: 3 × 1 #> # Rowwise:  #>      sg #>   <dbl> #> 1  32.1 #> 2  13   #> 3 103 # example of how sg_cord_drink_converter behaves data <- data.frame(volume_ml = c(30, 10, 100),                    volume_water_ml = c(0, 90, NA),                    nutrition_info = c(\"as consumed\",\"preparation instructions given\", \"preparation instructions not given\"))  sg_cord_drink_converter(data[1,]) #> [1] 30.9  data %>%   rowwise() %>%   mutate(sg = sg_cord_drink_converter(pick(everything()))) %>%   select(sg)      #> # A tibble: 3 × 1 #> # Rowwise:  #>      sg #>   <dbl> #> 1  30.9 #> 2 103   #> 3 109 # example of how sg_powd_drink_converter behaves data <- data.frame(volume_ml = c(90, NA, NA),                    weight_g = c(NA, 10, 100),                    volume_water_ml = c(0, 90, NA),                    nutrition_info = c(\"as consumed\",\"preparation instructions given\", \"preparation instructions not given\"))  sg_powd_drink_converter(data[1,]) #> [1] 92.7  data %>%   rowwise() %>%   mutate(sg = sg_powd_drink_converter(pick(everything()))) %>%   select(sg)      #> # A tibble: 3 × 1 #> # Rowwise:  #>      sg #>   <dbl> #> 1  92.7 #> 2 103   #> 3 100"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/specific_gravity.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Specific Gravity Adjustment","text":"Overall functions SGConverter quite constrictive. expect particular column names work won’t just work data. However, building blocks functions generic_specific_gravity can used develop functions building specific gravity conversion pipeline. existing steps shown serve template build specific gravity conversion pipeline.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"loading-package-onto-an-airgapped-hpc-system","dir":"Articles","previous_headings":"","what":"Loading package onto an “airgapped” HPC system","title":"Example HPC workflow and troubleshooting","text":"working secure “airgapped” system without internet access, using R remotes package install nutrientprofiler work. Instead, file/data transfer process available, zipped package can transferred secure computational platform installed locally. process can broken 3 steps: Downloading package/zipped archive local system Transferring files secure system (required security checks) Installing without internet access secure system. instructions assume access form archived CRAN mirror commonly used packages available. Please check packages listed code snippets ensure access system.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"downloading-the-package-to-your-local-machine","dir":"Articles","previous_headings":"Loading package onto an “airgapped” HPC system","what":"1. Downloading the package to your local machine","title":"Example HPC workflow and troubleshooting","text":"can download specific tagged release (see GitHub releases page) development pre-release version code specific branch repository. Tagged releases allow better reproducibility; however, pre-release version needs used, reproducibility can still ensured recording download link used access date.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"downloading-a-tagged-release","dir":"Articles","previous_headings":"Loading package onto an “airgapped” HPC system > 1. Downloading the package to your local machine","what":"1.1 Downloading a tagged release","title":"Example HPC workflow and troubleshooting","text":"recommended method download recent tagged release .tar.gz archive. local desktop can run following R snippet download v1.0.0 release package: Alternatively, can downloaded directly GitHub releases page. different release can specified changing release tag. Make sure also update destination filename prevent confusion: required, zip file archives also available GitHub releases page can downloaded using following R script . Please note .zip archives require slightly different installation .tar.gz; please read isntallation steps first.","code":"# download the v1.0.0 release as a .tar.gz archive # to your current directory download.file(\"https://github.com/Leeds-CDRC/nutrientprofiler/archive/refs/tags/v1.0.0.tar.gz\",               dest = \"./nutrientprofiler-v1.0.0.tar.gz\") # replace <tag> with the required version number download.file(\"https://github.com/Leeds-CDRC/nutrientprofiler/archive/refs/tags/<tag>.tar.gz\",               dest = \"./nutrientprofiler-<tag>.tar.gz\") # download the <tag> release as a zip archive # to your current directory download.file(\"https://github.com/Leeds-CDRC/nutrientprofiler/archive/refs/tags/<tag>.zip\",               dest = \"./nutrientprofiler-<tag>.zip\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"downloading-the-current-development-version-or-a-specific-branch","dir":"Articles","previous_headings":"Loading package onto an “airgapped” HPC system > 1. Downloading the package to your local machine","what":"1.2 Downloading the current development version or a specific branch","title":"Example HPC workflow and troubleshooting","text":"want install pre-release version specific version branch, replace tags/version-number url heads/branch-name (rename destination file something sensible). Please record date download recent commit identifier branch may updated changed following download installation. example, following downloads current package “VarEdits” branch repository: , zip file version can downloaded replacing tar.gz snippet zip. zip file can also downloaded project GitHub page navigating required branch using green “Code” button open “Clone” option menu, selecting “Download zip” option. added reproducibility, can specify git commit tag ensure using specific version: , make sure modify installation command match archive name ’ve supplied.","code":"# replace \"tags/version-number\" with \"heads/branch-name\": # in this example, we replaced \"tags/v1.0.0\" with \"heads/VarEdits\" download.file(\"https://github.com/Leeds-CDRC/nutrientprofiler/archive/refs/heads/VarEdits.tar.gz\",               dest = \"./nutrientprofiler-VarEdits.tar.gz\") # use the unique commit id after \"archive/\" to specify a specific commit on a branch # use the first 8 characters of the commit id to tag your downloaded archive download.file(\"https://github.com/Leeds-CDRC/nutrientprofiler/archive/8502784c9e1402505530d87db001fc23fb0fb6df.tar.gz\",               dest = \"./nutrientprofiler-8502784.tar.gz\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"transferring-your-code-to-the-secure-platform","dir":"Articles","previous_headings":"Loading package onto an “airgapped” HPC system","what":"2. Transferring your code to the secure platform","title":"Example HPC workflow and troubleshooting","text":"step vary depending data transfer policies process enforced institution. package archive can unzipped testing, saved secure system ’s original compressed format.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"installation","dir":"Articles","previous_headings":"Loading package onto an “airgapped” HPC system","what":"3. Installation","title":"Example HPC workflow and troubleshooting","text":"secure computing platform, archive transferred, can install package. installation method differs depending filetype.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"install--tar-gz-archives","dir":"Articles","previous_headings":"Loading package onto an “airgapped” HPC system > 3. Installation","what":"3.1 Install .tar.gz archives","title":"Example HPC workflow and troubleshooting","text":"Using appropriate relative path archive, can install source: Change suggested filename suit specific installation:","code":"# install the package directly from source install.packages(\"./nutrientprofiler-v1.0.0.tar.gz\", repos = NULL, type=\"source\") # install the package directly from source install.packages(\"./nutrientprofiler-VarEdits.tar.gz\", repos = NULL, type=\"source\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"install--zip-archives","dir":"Articles","previous_headings":"Loading package onto an “airgapped” HPC system > 3. Installation","what":"3.2 Install .zip archives","title":"Example HPC workflow and troubleshooting","text":"order install package .zip file, need use devtools package: , change suggested filename suit specific installation.","code":"# install and load devtools install.packages(\"devtools\") library(devtools) devtools::install_local(\"./nutrientprofiler-v1.0.0.zip\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"example-workflow-for-processing-data-in-bulk","dir":"Articles","previous_headings":"","what":"Example workflow for processing data in bulk","title":"Example HPC workflow and troubleshooting","text":"nutrientprofiler installed system, can imported used interactively run within scripts bulk data. Ensure data formatted match example csv files column names. Assuming data want analyse stored \"data/example_data.csv\" want save results \"results/example_data_results.csv\" original columns plus results columns, can use script like : requires slight modification desired input file instead \"data/example_data.xlsx\":","code":"# load required libraries library(tidyr) library(dplyr) library(nutrientprofiler) # read in the data npm_testcases <- read.csv(\"data/example_data.csv\") # Analyse all entries, including specific gravity conversion, NPM scoring and assessment npm_testcases_results <- npm_testcases %>%    rowwise() %>%    mutate( sg = SGConverter(pick(everything()))) %>%    mutate(test = NPMScore(pick(everything()), sg_adjusted_label=\"sg\")) %>%    unnest(test) %>%    rowwise() %>%   mutate(assess = NPMAssess(pick(everything()))) %>%   unnest(assess) %>%   select(everything(), energy_score, sugar_score, salt_score, fvn_score,   protein_score, satfat_score, fibre_score, NPM_score, NPM_assessment) # Save results to a csv file write.csv(npm_testcases_results, \"results/example_data_results.csv\", row.names = FALSE) # load required libraries install.packages(\"readxl\") # If this is not already installed in the workspace library(tidyr) library(dplyr) library(readxl) library(nutrientprofiler) # read in the data on the first sheet of the spreadsheet (sheet = 1) npm_testcases <- read_excel(\"data/example_data.xlsx\", sheet = 1) # The rest of the wokflow is the same..."},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/articles/workflows.html","id":"troubleshooting","dir":"Articles","previous_headings":"","what":"Troubleshooting","title":"Example HPC workflow and troubleshooting","text":"common errors arise likely related incorrect column names data, incorrect datatypes values columns. can check names columns using names(npm_testcases). can replace column names using script like : example shown uses function can reused multiple data sets column naming issues.","code":"# load required libraries library(tidyr) library(dplyr) library(nutrientprofiler) # read in the data npm_testcases <- read.csv(\"data/example_data.csv\") # Function to rename variables replace_var_names <- function(data_frame){     if (\"fat_measurement_g\" %in% names(data_frame)){         data_frame <- rename(data_frame, satfat_measurement_g = fat_measurement_g)     }     if (\"fruit_nut_measurement_percent\" %in% names(data_frame)){         data_frame <- rename(data_frame, fvn_measurement_percent = fruit_nut_measurement_percent)     } } # Call the function on the example data replaced_names <- replace_var_names(npm_testcases)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alex Coleman. Author. Vicki Jenneson. Author, maintainer. Maeve Murphy Quinlan. Author.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coleman , Jenneson V, Murphy Quinlan M (2024). nutrientprofiler: Nutrient Model Profiler. R package version 2.0.0, https://github.com/Leeds-CDRC/nutrientprofiler, https://leeds-cdrc.github.io/nutrientprofiler/.","code":"@Manual{,   title = {nutrientprofiler: Nutrient Model Profiler},   author = {Alex Coleman and Vicki Jenneson and Maeve {Murphy Quinlan}},   year = {2024},   note = {R package version 2.0.0, https://github.com/Leeds-CDRC/nutrientprofiler},   url = {https://leeds-cdrc.github.io/nutrientprofiler/}, }"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/index.html","id":"id_-nutrientprofiler-r-package","dir":"","previous_headings":"","what":"Nutrient Model Profiler","title":"Nutrient Model Profiler","text":"Welcome nutrientprofiler R package repository! package provides functions help assess product information UK Nutrient Profiling Model (2004/5) scope HFSS legislation around product placement. designed provide low level functions implement UK Nutrient Profiling Model scoring can applied across product datasets.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Nutrient Model Profiler","text":"present R package available via CRAN. can however install direct GitHub using remotes. can also specify version nutrientprofiler package: can also download package archive GitHub install source using following steps. steps show directly within R can also download archive respository directly GitHub releases page.","code":"install.packages(\"remotes\")  remotes::install_github(\"Leeds-CDRC/nutrientprofiler\") install.packages(\"remotes\")  remotes::install_github(\"leeds-cdrc/nutrientprofiler@v1.0.0\") # download the repository as a .tar.gz archive # to your current directory download.file(\"https://github.com/Leeds-CDRC/nutrientprofiler/archive/refs/tags/v0.2.2.tar.gz\",               dest = \"./nutrientprofiler-v0.2.2.tar.gz\")  # install the package directly from source install.packages(\"./nutrientprofiler-v0.2.2.tar.gz\", repos = NULL, type=\"source\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/index.html","id":"navigating-the-documentation","dir":"","previous_headings":"","what":"Navigating the documentation","title":"Nutrient Model Profiler","text":"Please see Getting started overview nutrientprofiler package works. learn prepare data analysis, please first see Preprocessing Handling input data. details valid data types different parameters, see Parameter guide. learn logic specific gravity adjustment workflow, see Specific Gravity, implement custom values adjustment, see guidance article Custom Specific Gravity.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Nutrient Model Profiler","text":"document outlines rough approach local setup contributing project.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/index.html","id":"local-setup","dir":"","previous_headings":"","what":"Local setup","title":"Nutrient Model Profiler","text":"work project locally need Git R installed locally. also recommended install Docker VSCode enable utilise devcontainer setup edit code directly via GitHub Codespaces. ’re unfamiliar using git check fantastic Carpentries introductory course. get working project need devtools package can install following R command:","code":"# Install devtools from CRAN install.packages(\"devtools\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/index.html","id":"development-workflow","dir":"","previous_headings":"Local setup","what":"Development workflow","title":"Nutrient Model Profiler","text":"working locally use following workflow help develop code: Create fork GitHub repository create personal copy repository can push changes Locally clone fork can start working Open R session Load devtools : R     library(devtools) Make change package files Test R session running load_all() load package (check errors) Check changes pass tests running test() package passes tests ’ve updated appropriate documentation now run check() locally make sure appropriate roxygen2 files created/update functions ’ve now tagged @export exported NAMESPACE Commit changes check() run push GitHub Open pull request main branch development branch. trigger GitHub action also runs equivalent check() make sure didn’t miss anything ensure package still works different versions R. checks pass pull request changes can accepted maintainer.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Nutrient Model Profiler","text":"nutrientprofiler package provides functions help assess product information UK Nutrient Profiling Model (2004/5) scope HFSS legislation around product placement. designed provide low level functions implement UK Nutrient Profiling Model scoring can applied across product datasets. Copyright (C) 2024 University Leeds program free software: can redistribute /modify terms GNU Affero General Public License published Free Software Foundation, version 3. program distributed hope useful, WITHOUT WARRANTY; without even implied warranty MERCHANTABILITY FITNESS PARTICULAR PURPOSE. See GNU Affero General Public License details. copy GNU Affero General Public License supplied along program LICENSE file repository. can also find full text https://www.gnu.org/licenses. can contact us raising issue GitHub repository (https://github.com/Leeds-CDRC/nutrientprofiler/issues/new - login required) emailing us info@cdrc.ac.uk.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/A_scorer.html","id":null,"dir":"Reference","previous_headings":"","what":"A score function — A_scorer","title":"A score function — A_scorer","text":"scores defined scores energy, sugars, sat fat salt summed together","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/A_scorer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A score function — A_scorer","text":"","code":"A_scorer(energy_score, sugar_score, satfat_score, salt_score)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/A_scorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A score function — A_scorer","text":"energy_score, numeric value energy score sugar_score, numeric value sugar score satfat_score, numeric value sat fat score salt_score, numeric value salt score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/A_scorer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A score function — A_scorer","text":"numeric value score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/AutoDefaultParamCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Required parameter with automatic defaults checking function — AutoDefaultParamCheck","title":"Required parameter with automatic defaults checking function — AutoDefaultParamCheck","text":"function checks whether values drink_format, drink_type, food_type provided. default settings automatically applied value supplied. Please read documentation detail. record use default parameters, please see AutoDefaultParamNote().","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/AutoDefaultParamCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required parameter with automatic defaults checking function — AutoDefaultParamCheck","text":"","code":"AutoDefaultParamCheck(data_frame, report_data)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/AutoDefaultParamCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required parameter with automatic defaults checking function — AutoDefaultParamCheck","text":"data_frame data.frame object product data report_data data.frame object produced ReqParamCheck() information missing parameters","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/AutoDefaultParamCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required parameter with automatic defaults checking function — AutoDefaultParamCheck","text":"report_data data.frame object updated information missing parameters","code":""},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/AutoDefaultParamNote.html","id":null,"dir":"Reference","previous_headings":"","what":"Required parameter with automatic defaults recording function — AutoDefaultParamNote","title":"Required parameter with automatic defaults recording function — AutoDefaultParamNote","text":"function checks whether values drink_format, drink_type, food_type provided records product data frame defaults used analysis.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/AutoDefaultParamNote.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required parameter with automatic defaults recording function — AutoDefaultParamNote","text":"","code":"AutoDefaultParamNote(data_frame, report_data)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/AutoDefaultParamNote.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required parameter with automatic defaults recording function — AutoDefaultParamNote","text":"data_frame data.frame object product data report_data data.frame object produced ReqParamCheck() information missing parameters","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/AutoDefaultParamNote.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required parameter with automatic defaults recording function — AutoDefaultParamNote","text":"data_frame product data additional column recording default use","code":""},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/C_scorer.html","id":null,"dir":"Reference","previous_headings":"","what":"C score function — C_scorer","title":"C score function — C_scorer","text":"C score defined scores fruit/veg/nut percentage, protein fibre summed together","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/C_scorer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"C score function — C_scorer","text":"","code":"C_scorer(fvn_score, protein_score, fibre_score)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/C_scorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"C score function — C_scorer","text":"fvn_score, numeric value fruit/vegetables/nuts percentage score protein_score, numeric value protein score fibre_score, numeric value fibre score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/C_scorer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"C score function — C_scorer","text":"numeric value C score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/CheckValues.html","id":null,"dir":"Reference","previous_headings":"","what":"Check parameter values function — CheckValues","title":"Check parameter values function — CheckValues","text":"function takes input dataframe counts unique occurrences parameter lists included values. allows check values misspelled invalid entries.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/CheckValues.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check parameter values function — CheckValues","text":"","code":"CheckValues(data_frame)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/CheckValues.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check parameter values function — CheckValues","text":"data_frame data.frame object product data","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/CheckValues.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check parameter values function — CheckValues","text":"results data.frame object named parameter unique occurrences values","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/ManualParamUpdate.html","id":null,"dir":"Reference","previous_headings":"","what":"Manual parameter update function — ManualParamUpdate","title":"Manual parameter update function — ManualParamUpdate","text":"function allows updating/setting parameter manually one missing incorrect. Additionally, records parameters manually added. function allows multiple rows data changed supplying list index values.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/ManualParamUpdate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Manual parameter update function — ManualParamUpdate","text":"","code":"ManualParamUpdate(data_frame, parameter_name, index_list, value)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/ManualParamUpdate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Manual parameter update function — ManualParamUpdate","text":"data_frame data.frame object product data parameter_name chr object name parameter changed index_list vector object index values parameters changed value value enter parameter","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/ManualParamUpdate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Manual parameter update function — ManualParamUpdate","text":"data_frame product data additional column recording manual param editing","code":""},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMAssess.html","id":null,"dir":"Reference","previous_headings":"","what":"NPMAssess function — NPMAssess","title":"NPMAssess function — NPMAssess","text":"function aims apply various scoring functions across data.frame row row basis. expected use function conjunction call lapply single row. function returns data.frame containing score, C score, NPM score NPM assessment.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMAssess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NPMAssess function — NPMAssess","text":"","code":"NPMAssess(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMAssess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NPMAssess function — NPMAssess","text":"row, row NPMScore call","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMAssess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NPMAssess function — NPMAssess","text":"data.frame containing score, C score, NPM score, NPM assessment row","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMScore.html","id":null,"dir":"Reference","previous_headings":"","what":"NPM scoring dispatcher — NPMScore","title":"NPM scoring dispatcher — NPMScore","text":"function written calculating NPM scores across entire row dataframe. wrapper logic underlying NPM_score_function applied NPMCalculator input data frame highly inflexible without expected column names. expects specific gravity conversions already performed values outputted new single column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMScore.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NPM scoring dispatcher — NPMScore","text":"","code":"NPMScore(row, sg_adjusted_label)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMScore.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NPM scoring dispatcher — NPMScore","text":"row row NPMCalculator dataframe sg_adjusted_label character value specifying name specific gravity adjusted column","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPMScore.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NPM scoring dispatcher — NPMScore","text":"matrix NPM scores","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_assess.html","id":null,"dir":"Reference","previous_headings":"","what":"NPM Assess function — NPM_assess","title":"NPM Assess function — NPM_assess","text":"function takes NPM score returns either \"PASS\" \"FAIL\" depending type argument. type either \"food\" \"drink\".","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_assess.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NPM Assess function — NPM_assess","text":"","code":"NPM_assess(NPM_score, type)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_assess.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NPM Assess function — NPM_assess","text":"NPM_score, numeric value NPM score type, character value either \"food\" \"drink\" determine assess score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_assess.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NPM Assess function — NPM_assess","text":"character value either \"PASS\" \"FAIL\"","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_score_function.html","id":null,"dir":"Reference","previous_headings":"","what":"The NPM scoring dispatch function — NPM_score_function","title":"The NPM scoring dispatch function — NPM_score_function","text":"function serves main entry point getting nutrient profiling model scores. takes value (vector values) type using type determines scoring function use based constant thresholds. Adjustments value passed also performed types except fvn. adjustments take account adjusted_weight product (specific gravity transformations) calculate new value applied scoring thresholds. ... provided allow passing additional arguments adjuster functions. code based logic within https://github.com/Leeds-CDRC/NPM-Calculator/blob/main/server.R","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_score_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The NPM scoring dispatch function — NPM_score_function","text":"","code":"NPM_score_function(value, type, ...)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_score_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The NPM scoring dispatch function — NPM_score_function","text":"value, numeric value vector values score type, character string specifies type value passed control scoring logic ..., option named arguments pass adjuster functions, commonly adjusted_weight","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_score_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The NPM scoring dispatch function — NPM_score_function","text":"numeric score value vector scores","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_total.html","id":null,"dir":"Reference","previous_headings":"","what":"NPM_total — NPM_total","title":"NPM_total — NPM_total","text":"function calculate total NPM score Logic function documented Nutrient Profiling Technical Guidance page 6.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_total.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"NPM_total — NPM_total","text":"","code":"NPM_total(a_score, c_score, fvn_score, fibre_score)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_total.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"NPM_total — NPM_total","text":"a_score, numeric value score c_score, numeric value C score fvn_score, numeric value specific score fruit/veg/nuts percentage fibre_score, numeric value fibre score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/NPM_total.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"NPM_total — NPM_total","text":"numeric value overall NPM score","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/ReqParamCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Required parameter checking function — ReqParamCheck","title":"Required parameter checking function — ReqParamCheck","text":"function processes data.frame object product data check required parameters. returns report table contains row indices missing required parameters. Please see guidance required default parameters information processing data.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/ReqParamCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Required parameter checking function — ReqParamCheck","text":"","code":"ReqParamCheck(data_frame)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/ReqParamCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Required parameter checking function — ReqParamCheck","text":"data_frame data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/ReqParamCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Required parameter checking function — ReqParamCheck","text":"report_data data.frame object information missing parameters","code":""},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGConverter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific Gravity converter function — SGConverter","title":"Specific Gravity converter function — SGConverter","text":"function key entry point performing specific gravity conversions works processing data dataframe row dispatching based column values series additional sub functions return back SG-adjusted number","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGConverter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific Gravity converter function — SGConverter","text":"","code":"SGConverter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGConverter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific Gravity converter function — SGConverter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGConverter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific Gravity converter function — SGConverter","text":"number.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGtab.html","id":null,"dir":"Reference","previous_headings":"","what":"specific gravity conversion named vector — SGtab","title":"specific gravity conversion named vector — SGtab","text":"specific gravity conversion named vector","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGtab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"specific gravity conversion named vector — SGtab","text":"","code":"SGtab"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SGtab.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"specific gravity conversion named vector — SGtab","text":"object class numeric length 14.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SaveReport.html","id":null,"dir":"Reference","previous_headings":"","what":"Save report function — SaveReport","title":"Save report function — SaveReport","text":"function saves transposed version report generated ReqParamCheck()","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SaveReport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save report function — SaveReport","text":"","code":"SaveReport(data_frame, file_path)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SaveReport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save report function — SaveReport","text":"data_frame data.frame object file_path chr object containing relative filepath current working directory, save csv","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/SaveReport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save report function — SaveReport","text":"saves csv file","code":""},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/cdrcdrinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Example dataset called CDRC Drinks — cdrcdrinks","title":"Example dataset called CDRC Drinks — cdrcdrinks","text":"handcrafted set data can used input nutrientprofiler functions","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/cdrcdrinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example dataset called CDRC Drinks — cdrcdrinks","text":"","code":"cdrcdrinks"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/cdrcdrinks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example dataset called CDRC Drinks — cdrcdrinks","text":"cdrcdrinks ## data frame 10 rows 21 columns: name Name product brand Brand product product_category Category product product_type Type product, .e. Food Drink food_type Type food, used specific gravity conversion drink_format Format drink, used specific gravity conversion drink_type Type drink, used speciifc gravity conversion nutrition_info nutritional information presented, specific gravity conversion energy_measurement_kj Energy measurement KJ energy_measurement_kcal Energy measurement kcal sugar_measurement_g Sugar content measured grams satfat_measurement_g saturated fat content measured grams salt_measurement_g salt content measured grams sodium_measurement_mg salt content measured mg sodium fibre_measurement_nsp fibtre measurement using NSP fibre_measurement_aoac fibre measurement using AOAC protein_measurement_g protein emasurement product fvn_measurement_percent percent fruit/veg/nuts product weight_g mass product solid volume_ml volume product liquid volume_water_ml volume water diluted products","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/energy_value_adjuster.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for adjusting energy information for A score calculation — energy_value_adjuster","title":"Function for adjusting energy information for A score calculation — energy_value_adjuster","text":"Adjustment required calculating scores based nutritional measurements.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/energy_value_adjuster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for adjusting energy information for A score calculation — energy_value_adjuster","text":"","code":"energy_value_adjuster(value, adjusted_weight, adjuster_type = \"kj\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/energy_value_adjuster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for adjusting energy information for A score calculation — energy_value_adjuster","text":"value numeric value corresponding energy measurement food/drink adjusted_weight numeric value corresponding total weight food/drink specific gravity adjustment adjuster_type character value either kj kcal determine adjustment perform","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/energy_value_adjuster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for adjusting energy information for A score calculation — energy_value_adjuster","text":"numeric value adjusted nutritional data","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fillMissingParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"Fill the missing parameters function — fillMissingParameters","title":"Fill the missing parameters function — fillMissingParameters","text":"function creates columns filled NA provided vector missing parameter names. Please attempt rename parameters filling columns.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fillMissingParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fill the missing parameters function — fillMissingParameters","text":"","code":"fillMissingParameters(data_frame, missing_parameters)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fillMissingParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fill the missing parameters function — fillMissingParameters","text":"data_frame data.frame object, loaded csv Excel missing_parameters vector object missing column/parameter names","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fillMissingParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fill the missing parameters function — fillMissingParameters","text":"data_frame data.frame object, new columns added filled NA","code":""},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fruit_veg_nut_scorer.html","id":null,"dir":"Reference","previous_headings":"","what":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","title":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","text":"scoring logic percentage fruit, vegetables nuts product different scorers. Therefore, use generic scoring function write specific one .","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fruit_veg_nut_scorer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","text":"","code":"fruit_veg_nut_scorer(value)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fruit_veg_nut_scorer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","text":"value numeric value percentage fruit, nuts vegetables","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/fruit_veg_nut_scorer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fruit, Vegetable and nut scorer — fruit_veg_nut_scorer","text":"numeric score value","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_adjuster.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","title":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","text":"Adjustment required calculating scores based nutritional measurements.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_adjuster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","text":"","code":"generic_adjuster(value, adjusted_weight)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_adjuster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","text":"value numeric value corresponding nutritional measurement food/drink adjusted_weight numeric value corresponding total weight food/drink specific gravity adjustment","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_adjuster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for generically adjusting nutritional measurement by total weight — generic_adjuster","text":"numeric value adjusted nutritional data","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_specific_gravity.html","id":null,"dir":"Reference","previous_headings":"","what":"Generic specific gravity converter — generic_specific_gravity","title":"Generic specific gravity converter — generic_specific_gravity","text":"function specifies generic specific gravity conversion","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_specific_gravity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generic specific gravity converter — generic_specific_gravity","text":"","code":"generic_specific_gravity(volume, specific_gravity)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_specific_gravity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generic specific gravity converter — generic_specific_gravity","text":"volume, value representing volume adjust specific gravity specific_gravity, multiplier representing specific gravity product","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/generic_specific_gravity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generic specific gravity converter — generic_specific_gravity","text":"value adjusted specific_gravity","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/inputDataCheck.html","id":null,"dir":"Reference","previous_headings":"","what":"Data check function — inputDataCheck","title":"Data check function — inputDataCheck","text":"function checks required parameter names spreadsheet \"column\" names present, provides code snippet change parameter names required.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/inputDataCheck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data check function — inputDataCheck","text":"","code":"inputDataCheck(data_frame)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/inputDataCheck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data check function — inputDataCheck","text":"data_frame data.frame object, loaded csv Excel","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/inputDataCheck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data check function — inputDataCheck","text":"Prints code snippets help rename variables needed","code":""},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/listMissingParameters.html","id":null,"dir":"Reference","previous_headings":"","what":"List the missing parameters function — listMissingParameters","title":"List the missing parameters function — listMissingParameters","text":"function returns parameters input data file missing.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/listMissingParameters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List the missing parameters function — listMissingParameters","text":"","code":"listMissingParameters(data_frame)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/listMissingParameters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List the missing parameters function — listMissingParameters","text":"data_frame data.frame object, loaded csv Excel","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/listMissingParameters.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List the missing parameters function — listMissingParameters","text":"missing_column_names vector object missing column names","code":""},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/parameterRename.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter rename function — parameterRename","title":"Parameter rename function — parameterRename","text":"function renames specified parameters/columns dataframe match expected parameters required nutrientprofiler.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/parameterRename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter rename function — parameterRename","text":"","code":"parameterRename(missing_column_name, associated_data_column, data_frame)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/parameterRename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter rename function — parameterRename","text":"missing_column_name chr object missing nutrientprofiler parameter associated_data_column chr object associated column header loaded data data_frame data.frame object, loaded csv Excel","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/parameterRename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter rename function — parameterRename","text":"data_frame data.frame object updated column names","code":""},{"path":[]},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/salt_adjuster.html","id":null,"dir":"Reference","previous_headings":"","what":"Function for adjusting the salt input value — salt_adjuster","title":"Function for adjusting the salt input value — salt_adjuster","text":"Adjustments required calculating scores depends type salt measurement provided.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/salt_adjuster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function for adjusting the salt input value — salt_adjuster","text":"","code":"salt_adjuster(value, adjusted_weight, adjuster_type = \"sodium\")"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/salt_adjuster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function for adjusting the salt input value — salt_adjuster","text":"value numeric value corresponding salt measurement food/drink adjusted_weight numeric value corresponding total weight food/drink specific gravity adjustment adjuster_type character either \"salt\" \"sodium\" help determine required adjustment","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/salt_adjuster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function for adjusting the salt input value — salt_adjuster","text":"numeric value appropriate adjustment made","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/scoring_function.html","id":null,"dir":"Reference","previous_headings":"","what":"a template scoring function — scoring_function","title":"a template scoring function — scoring_function","text":"function takes value vector thresholds iterates reversed vector indexes thresholds vector checks value less threshold value itered index (comparing smallest largest). threshold score calculated length thresholds minus every else branch iter loop.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/scoring_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a template scoring function — scoring_function","text":"","code":"scoring_function(value, thresholds)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/scoring_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a template scoring function — scoring_function","text":"value passed numeric value thresholds vector thresholds use score order highest lowest","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_cord_drink_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","title":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","text":"function performs specific gravity conversion cordial drinks conversion performed based value nutrition_info column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_cord_drink_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","text":"","code":"sg_cord_drink_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_cord_drink_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_cord_drink_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity drink converter for cordial drinks — sg_cord_drink_converter","text":"numeric value specific gravity adjusted volume depending nutrition_info column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_drink_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity drink dispatcher — sg_drink_converter","title":"Specific gravity drink dispatcher — sg_drink_converter","text":"function run data product_type \"drink\" dispatches additional functions based matched value drink_format column","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_drink_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity drink dispatcher — sg_drink_converter","text":"","code":"sg_drink_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_drink_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity drink dispatcher — sg_drink_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_drink_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity drink dispatcher — sg_drink_converter","text":"dispatches row another converter function based value drink_format column row","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_food_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity food dispatcher — sg_food_converter","title":"Specific gravity food dispatcher — sg_food_converter","text":"function run data product_type \"food\" checks column weight_g contains NA values assume whether food liquid solid solid returns weight unadjusted liquid dispatches additional function","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_food_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity food dispatcher — sg_food_converter","text":"","code":"sg_food_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_food_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity food dispatcher — sg_food_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_food_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity food dispatcher — sg_food_converter","text":"either value weight_g column row dispatches row sg_liquidfood_converter","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_liquidfood_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity liquid converter — sg_liquidfood_converter","title":"Specific gravity liquid converter — sg_liquidfood_converter","text":"function run data identified sg_food_converter liquid food checks value food_type column present retrieves specific gravity multiplier multiplies volume_ml column value. food_type empty returns unadjusted volume_ml value","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_liquidfood_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity liquid converter — sg_liquidfood_converter","text":"","code":"sg_liquidfood_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_liquidfood_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity liquid converter — sg_liquidfood_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_liquidfood_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity liquid converter — sg_liquidfood_converter","text":"numeric value specific gravity adjusted volume_ml column row","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_powd_drink_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","title":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","text":"function performs specific gravity conversion powdered drinks conversion performed based value nutrition_info column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_powd_drink_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","text":"","code":"sg_powd_drink_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_powd_drink_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_powd_drink_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity drink converter for powdered drinks — sg_powd_drink_converter","text":"numeric value specific gravity adjusted volume/mass depending nutrition_info column.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_ready_drink_converter.html","id":null,"dir":"Reference","previous_headings":"","what":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","title":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","text":"function performs specific gravity conversion ready consume drinks based specific gravity value value drink_type column. column empty returns volume_ml unadjusted.","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_ready_drink_converter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","text":"","code":"sg_ready_drink_converter(row)"},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_ready_drink_converter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","text":"row row data.frame object","code":""},{"path":"https://leeds-cdrc.github.io/nutrientprofiler/reference/sg_ready_drink_converter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specific gravity drink converter for ready to consume drinks — sg_ready_drink_converter","text":"numeric value specific gravity adjusted volume_ml column row based drink_type column","code":""}]
